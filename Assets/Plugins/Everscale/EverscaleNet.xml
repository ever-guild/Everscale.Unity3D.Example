<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EverscaleNet</name>
    </assembly>
    <members>
        <member name="T:EverscaleNet.Abstract.IEverClientAdapter">
            <summary>
                Provide core methods used by client 
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request(System.String,System.Threading.CancellationToken)">
            <summary>
                Call core client method
            </summary>
            <param name="method">Method name</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request``1(System.String,System.Threading.CancellationToken)">
            <summary>
                Call core client method and return result
            </summary>
            <param name="method">Method name</param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">Response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="method">Method name</param>
            <param name="request">Request</param>
            <param name="cancellationToken"></param>
            <typeparam name="TRequest">Request type</typeparam>
            <returns></returns>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request``2(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="method">Method name</param>
            <param name="request">Request</param>
            <param name="cancellationToken"></param>
            <typeparam name="TRequest">Request type</typeparam>
            <typeparam name="TResponse">Response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request``2(System.String,System.Action{``1,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="method">Method name</param>
            <param name="callback"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TResponse">Response type</typeparam>
            <typeparam name="TEvent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverClientAdapter.Request``3(System.String,``0,System.Action{``2,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="method">Method name</param>
            <param name="request">Request</param>
            <param name="callback"></param>
            <param name="cancellationToken"></param>
            <typeparam name="TRequest">Request type</typeparam>
            <typeparam name="TResponse">Response type</typeparam>
            <typeparam name="TEvent"></typeparam>
            <returns></returns>
        </member>
        <member name="T:EverscaleNet.Abstract.IEverModule">
            <summary>
                Use for register modules by reflection
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.IEverPackageManager">
            <summary>
                Load package from abi and tvm files. Default path is _contracts/abi_v{AbiVersion}/
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverPackageManager.LoadPackage(System.String,System.Threading.CancellationToken)">
            <summary>
                Load package from abi and tvm files. Default path is _contracts/abi_v{AbiVersion}/
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverPackageManager.LoadAbi(System.String,System.Threading.CancellationToken)">
            <summary>
                Load Abi from abi file. Default path is _contracts/abi_v{AbiVersion}/{PackageName}.abi
            </summary>
            <param name="name">Package name</param>
            <param name="cancellationToken"></param>
            <returns>
                <see cref="T:EverscaleNet.Client.Models.Abi" />
                Contract interface, the methods and parameters used to interact with it.
            </returns>
        </member>
        <member name="M:EverscaleNet.Abstract.IEverPackageManager.LoadTvc(System.String,System.Threading.CancellationToken)">
            <summary>
                Load Tvc from tvc file. Default path is _contracts/abi_v{AbiVersion}/{PackageName}.tvc
            </summary>
            <param name="name">Package name</param>
            <param name="cancellationToken"></param>
            <returns>
                The compiled smart contract data. Used only when generating contract address and deploying contract code to the blockchain.
            </returns>
        </member>
        <member name="T:EverscaleNet.Abstract.IEverClient">
            <summary>
            IEverClient
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Client">
            <summary>
            Provides information about library.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Crypto">
            <summary>
            Crypto functions.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Abi">
            <summary>
            Provides message encoding and decoding according to the ABI specification.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Boc">
            <summary>
            BOC manipulation module.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Processing">
            <summary>
            <para>Message processing module.</para>
            <para>This module incorporates functions related to complex message</para>
            <para>processing scenarios.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Utils">
            <summary>
            Misc utility Functions.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Tvm">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Net">
            <summary>
            Network access.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Debot">
            <summary>
            [UNSTABLE](UNSTABLE.md) Module for working with debot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Abstract.IEverClient.Proofs">
            <summary>
            [UNSTABLE](UNSTABLE.md) Module for proving data, retrieved from TONOS API.
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IAbiModule">
            <summary>
            Abi Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeMessageBody(EverscaleNet.Client.Models.ParamsOfEncodeMessageBody,System.Threading.CancellationToken)">
            <summary>
            Encodes message body according to ABI function call.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.AttachSignatureToMessageBody(EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody,System.Threading.CancellationToken)">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeMessage(EverscaleNet.Client.Models.ParamsOfEncodeMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes an ABI-compatible message</para>
            <para>Allows to encode deploy and function call messages,</para>
            <para>both signed and unsigned.</para>
            <para>Use cases include messages of any possible type:</para>
            <para>- deploy with initial function call (i.e. `constructor` or any other function that is used for some kind</para>
            <para>of initialization);</para>
            <para>- deploy without initial function call;</para>
            <para>- signed/unsigned + data for signing.</para>
            <para>`Signer` defines how the message should or shouldn't be signed:</para>
            <para>`Signer::None` creates an unsigned message. This may be needed in case of some public methods,</para>
            <para>that do not require authorization by pubkey.</para>
            <para>`Signer::External` takes public key and returns `data_to_sign` for later signing.</para>
            <para>Use `attach_signature` method with the result signature to get the signed message.</para>
            <para>`Signer::Keys` creates a signed message with provided key pair.</para>
            <para>[SOON] `Signer::SigningBox` Allows using a special interface to implement signing</para>
            <para>without private key disclosure to SDK. For instance, in case of using a cold wallet or HSM,</para>
            <para>when application calls some API to sign data.</para>
            <para>There is an optional public key can be provided in deploy set in order to substitute one</para>
            <para>in TVM file.</para>
            <para>Public key resolving priority:</para>
            <para>1. Public key from deploy set.</para>
            <para>2. Public key, specified in TVM file.</para>
            <para>3. Public key, provided by signer.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeInternalMessage(EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes an internal ABI-compatible message</para>
            <para>Allows to encode deploy and function call messages.</para>
            <para>Use cases include messages of any possible type:</para>
            <para>- deploy with initial function call (i.e. `constructor` or any other function that is used for some kind</para>
            <para>of initialization);</para>
            <para>- deploy without initial function call;</para>
            <para>- simple function call</para>
            <para>There is an optional public key can be provided in deploy set in order to substitute one</para>
            <para>in TVM file.</para>
            <para>Public key resolving priority:</para>
            <para>1. Public key from deploy set.</para>
            <para>2. Public key, specified in TVM file.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.AttachSignature(EverscaleNet.Client.Models.ParamsOfAttachSignature,System.Threading.CancellationToken)">
            <summary>
            Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`. Returns signed message encoded in `base64`.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.DecodeMessage(EverscaleNet.Client.Models.ParamsOfDecodeMessage,System.Threading.CancellationToken)">
            <summary>
            Decodes message body using provided message BOC and ABI.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.DecodeMessageBody(EverscaleNet.Client.Models.ParamsOfDecodeMessageBody,System.Threading.CancellationToken)">
            <summary>
            Decodes message body using provided body BOC and ABI.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeAccount(EverscaleNet.Client.Models.ParamsOfEncodeAccount,System.Threading.CancellationToken)">
            <summary>
            <para>Creates account state BOC</para>
            <para>Creates account state provided with one of these sets of data :</para>
            <para>1. BOC of code, BOC of data, BOC of library</para>
            <para>2. TVC (string in `base64`), keys, init params</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.DecodeAccountData(EverscaleNet.Client.Models.ParamsOfDecodeAccountData,System.Threading.CancellationToken)">
            <summary>
            <para>Decodes account data using provided data BOC and ABI.</para>
            <para>Note: this feature requires ABI 2.1 or higher.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.UpdateInitialData(EverscaleNet.Client.Models.ParamsOfUpdateInitialData,System.Threading.CancellationToken)">
            <summary>
            Updates initial account data with initial values for the contract's static variables and owner's public key. This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeInitialData(EverscaleNet.Client.Models.ParamsOfEncodeInitialData,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes initial account data with initial values for the contract's static variables and owner's public key into a data BOC that can be passed to `encode_tvc` function afterwards.</para>
            <para>This function is analogue of `tvm.buildDataInit` function in Solidity.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.DecodeInitialData(EverscaleNet.Client.Models.ParamsOfDecodeInitialData,System.Threading.CancellationToken)">
            <summary>
            Decodes initial values of a contract's static variables and owner's public key from account initial data This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.DecodeBoc(EverscaleNet.Client.Models.ParamsOfDecodeBoc,System.Threading.CancellationToken)">
            <summary>
            <para>Decodes BOC into JSON as a set of provided parameters.</para>
            <para>Solidity functions use ABI types for [builder encoding](https://github.com/tonlabs/TON-Solidity-Compiler/blob/master/API.md#tvmbuilderstore).</para>
            <para>The simplest way to decode such a BOC is to use ABI decoding.</para>
            <para>ABI has it own rules for fields layout in cells so manually encoded</para>
            <para>BOC can not be described in terms of ABI rules.</para>
            <para>To solve this problem we introduce a new ABI type `Ref(&lt;ParamType&gt;)`</para>
            <para>which allows to store `ParamType` ABI parameter in cell reference and, thus,</para>
            <para>decode manually encoded BOCs. This type is available only in `decode_boc` function</para>
            <para>and will not be available in ABI messages encoding until it is included into some ABI revision.</para>
            <para>Such BOC descriptions covers most users needs. If someone wants to decode some BOC which</para>
            <para>can not be described by these rules (i.e. BOC with TLB containing constructors of flags</para>
            <para>defining some parsing conditions) then they can decode the fields up to fork condition,</para>
            <para>check the parsed data manually, expand the parsing schema and then decode the whole BOC</para>
            <para>with the full schema.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IAbiModule.EncodeBoc(EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc,System.Threading.CancellationToken)">
            <summary>
            Encodes given parameters in JSON into a BOC using param types from ABI.
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IBocModule">
            <summary>
            Boc Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.ParseMessage(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses message boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API message object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.ParseTransaction(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses transaction boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API transaction object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.ParseAccount(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses account boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API account object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.ParseBlock(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses block boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API block object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.ParseShardstate(EverscaleNet.Client.Models.ParamsOfParseShardstate,System.Threading.CancellationToken)">
            <summary>
            <para>Parses shardstate boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API shardstate object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetBlockchainConfig(EverscaleNet.Client.Models.ParamsOfGetBlockchainConfig,System.Threading.CancellationToken)">
            <summary>
            Extract blockchain configuration from key block and also from zerostate.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetBocHash(EverscaleNet.Client.Models.ParamsOfGetBocHash,System.Threading.CancellationToken)">
            <summary>
            Calculates BOC root hash
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetBocDepth(EverscaleNet.Client.Models.ParamsOfGetBocDepth,System.Threading.CancellationToken)">
            <summary>
            Calculates BOC depth
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetCodeFromTvc(EverscaleNet.Client.Models.ParamsOfGetCodeFromTvc,System.Threading.CancellationToken)">
            <summary>
            Extracts code from TVC contract image
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.CacheGet(EverscaleNet.Client.Models.ParamsOfBocCacheGet,System.Threading.CancellationToken)">
            <summary>
            Get BOC from cache
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.CacheSet(EverscaleNet.Client.Models.ParamsOfBocCacheSet,System.Threading.CancellationToken)">
            <summary>
            Save BOC into cache
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.CacheUnpin(EverscaleNet.Client.Models.ParamsOfBocCacheUnpin,System.Threading.CancellationToken)">
            <summary>
            <para>Unpin BOCs with specified pin.</para>
            <para>BOCs which don't have another pins will be removed from cache</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.EncodeBoc(EverscaleNet.Client.Models.ParamsOfEncodeBoc,System.Threading.CancellationToken)">
            <summary>
            Encodes bag of cells (BOC) with builder operations. This method provides the same functionality as Solidity TvmBuilder. Resulting BOC of this method can be passed into Solidity and C++ contracts as TvmCell type.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetCodeSalt(EverscaleNet.Client.Models.ParamsOfGetCodeSalt,System.Threading.CancellationToken)">
            <summary>
            Returns the contract code's salt if it is present.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.SetCodeSalt(EverscaleNet.Client.Models.ParamsOfSetCodeSalt,System.Threading.CancellationToken)">
            <summary>
            <para>Sets new salt to contract code.</para>
            <para>Returns the new contract code with salt.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.DecodeTvc(EverscaleNet.Client.Models.ParamsOfDecodeTvc,System.Threading.CancellationToken)">
            <summary>
            Decodes tvc into code, data, libraries and special options.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.EncodeTvc(EverscaleNet.Client.Models.ParamsOfEncodeTvc,System.Threading.CancellationToken)">
            <summary>
            Encodes tvc from code, data, libraries ans special options (see input params)
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.EncodeExternalInMessage(EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes a message</para>
            <para>Allows to encode any external inbound message.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IBocModule.GetCompilerVersion(EverscaleNet.Client.Models.ParamsOfGetCompilerVersion,System.Threading.CancellationToken)">
            <summary>
            Returns the compiler version used to compile the code.
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IClientModule">
            <summary>
            Client Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IClientModule.GetApiReference(System.Threading.CancellationToken)">
            <summary>
            Returns Core Library API reference
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IClientModule.Version(System.Threading.CancellationToken)">
            <summary>
            Returns Core Library version
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IClientModule.BuildInfo(System.Threading.CancellationToken)">
            <summary>
            Returns detailed information about this build.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IClientModule.ResolveAppRequest(EverscaleNet.Client.Models.ParamsOfResolveAppRequest,System.Threading.CancellationToken)">
            <summary>
            Resolves application request processing result
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.ICryptoModule">
            <summary>
            Crypto Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Factorize(EverscaleNet.Client.Models.ParamsOfFactorize,System.Threading.CancellationToken)">
            <summary>
            <para>Integer factorization</para>
            <para>Performs prime factorization – decomposition of a composite number</para>
            <para>into a product of smaller prime integers (factors).</para>
            <para>See [https://en.wikipedia.org/wiki/Integer_factorization]</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.ModularPower(EverscaleNet.Client.Models.ParamsOfModularPower,System.Threading.CancellationToken)">
            <summary>
            <para>Modular exponentiation</para>
            <para>Performs modular exponentiation for big integers (`base`^`exponent` mod `modulus`).</para>
            <para>See [https://en.wikipedia.org/wiki/Modular_exponentiation]</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.TonCrc16(EverscaleNet.Client.Models.ParamsOfTonCrc16,System.Threading.CancellationToken)">
            <summary>
            Calculates CRC16 using TON algorithm.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.GenerateRandomBytes(EverscaleNet.Client.Models.ParamsOfGenerateRandomBytes,System.Threading.CancellationToken)">
            <summary>
            Generates random byte array of the specified length and returns it in `base64` format
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.ConvertPublicKeyToTonSafeFormat(EverscaleNet.Client.Models.ParamsOfConvertPublicKeyToTonSafeFormat,System.Threading.CancellationToken)">
            <summary>
            Converts public key to ton safe_format
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.GenerateRandomSignKeys(System.Threading.CancellationToken)">
            <summary>
            Generates random ed25519 key pair.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Sign(EverscaleNet.Client.Models.ParamsOfSign,System.Threading.CancellationToken)">
            <summary>
            Signs a data using the provided keys.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.VerifySignature(EverscaleNet.Client.Models.ParamsOfVerifySignature,System.Threading.CancellationToken)">
            <summary>
            Verifies signed data using the provided public key. Raises error if verification is failed.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Sha256(EverscaleNet.Client.Models.ParamsOfHash,System.Threading.CancellationToken)">
            <summary>
            Calculates SHA256 hash of the specified data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Sha512(EverscaleNet.Client.Models.ParamsOfHash,System.Threading.CancellationToken)">
            <summary>
            Calculates SHA512 hash of the specified data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Scrypt(EverscaleNet.Client.Models.ParamsOfScrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Perform `scrypt` encryption</para>
            <para>Derives key from `password` and `key` using `scrypt` algorithm.</para>
            <para>See [https://en.wikipedia.org/wiki/Scrypt].</para>
            <para># Arguments</para>
            <para>- `log_n` - The log2 of the Scrypt parameter `N`</para>
            <para>- `r` - The Scrypt parameter `r`</para>
            <para>- `p` - The Scrypt parameter `p`</para>
            <para># Conditions</para>
            <para>- `log_n` must be less than `64`</para>
            <para>- `r` must be greater than `0` and less than or equal to `4294967295`</para>
            <para>- `p` must be greater than `0` and less than `4294967295`</para>
            <para># Recommended values sufficient for most use-cases</para>
            <para>- `log_n = 15` (`n = 32768`)</para>
            <para>- `r = 8`</para>
            <para>- `p = 1`</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSignKeypairFromSecretKey(EverscaleNet.Client.Models.ParamsOfNaclSignKeyPairFromSecret,System.Threading.CancellationToken)">
            <summary>
            <para>Generates a key pair for signing from the secret key</para>
            <para>**NOTE:** In the result the secret key is actually the concatenation</para>
            <para>of secret and public keys (128 symbols hex string) by design of [NaCL](http://nacl.cr.yp.to/sign.html).</para>
            <para>See also [the stackexchange question](https://crypto.stackexchange.com/questions/54353/).</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSign(EverscaleNet.Client.Models.ParamsOfNaclSign,System.Threading.CancellationToken)">
            <summary>
            Signs data using the signer's secret key.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSignOpen(EverscaleNet.Client.Models.ParamsOfNaclSignOpen,System.Threading.CancellationToken)">
            <summary>
            <para>Verifies the signature and returns the unsigned message</para>
            <para>Verifies the signature in `signed` using the signer's public key `public`</para>
            <para>and returns the message `unsigned`.</para>
            <para>If the signature fails verification, crypto_sign_open raises an exception.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSignDetached(EverscaleNet.Client.Models.ParamsOfNaclSign,System.Threading.CancellationToken)">
            <summary>
            <para>Signs the message using the secret key and returns a signature.</para>
            <para>Signs the message `unsigned` using the secret key `secret`</para>
            <para>and returns a signature `signature`.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSignDetachedVerify(EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify,System.Threading.CancellationToken)">
            <summary>
            Verifies the signature with public key and `unsigned` data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclBoxKeypair(System.Threading.CancellationToken)">
            <summary>
            Generates a random NaCl key pair
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclBoxKeypairFromSecretKey(EverscaleNet.Client.Models.ParamsOfNaclBoxKeyPairFromSecret,System.Threading.CancellationToken)">
            <summary>
            Generates key pair from a secret key
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclBox(EverscaleNet.Client.Models.ParamsOfNaclBox,System.Threading.CancellationToken)">
            <summary>
            <para>Public key authenticated encryption</para>
            <para>Encrypt and authenticate a message using the senders secret key, the receivers public</para>
            <para>key, and a nonce.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclBoxOpen(EverscaleNet.Client.Models.ParamsOfNaclBoxOpen,System.Threading.CancellationToken)">
            <summary>
            Decrypt and verify the cipher text using the receivers secret key, the senders public key, and the nonce.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSecretBox(EverscaleNet.Client.Models.ParamsOfNaclSecretBox,System.Threading.CancellationToken)">
            <summary>
            Encrypt and authenticate message using nonce and secret key.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.NaclSecretBoxOpen(EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen,System.Threading.CancellationToken)">
            <summary>
            Decrypts and verifies cipher text using `nonce` and secret `key`.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.MnemonicWords(EverscaleNet.Client.Models.ParamsOfMnemonicWords,System.Threading.CancellationToken)">
            <summary>
            Prints the list of words from the specified dictionary
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.MnemonicFromRandom(EverscaleNet.Client.Models.ParamsOfMnemonicFromRandom,System.Threading.CancellationToken)">
            <summary>
            <para>Generates a random mnemonic</para>
            <para>Generates a random mnemonic from the specified dictionary and word count</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.MnemonicFromEntropy(EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy,System.Threading.CancellationToken)">
            <summary>
            Generates mnemonic from pre-generated entropy
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.MnemonicVerify(EverscaleNet.Client.Models.ParamsOfMnemonicVerify,System.Threading.CancellationToken)">
            <summary>
            <para>Validates a mnemonic phrase</para>
            <para>The phrase supplied will be checked for word length and validated according to the checksum</para>
            <para>specified in BIP0039.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.MnemonicDeriveSignKeys(EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys,System.Threading.CancellationToken)">
            <summary>
            <para>Derives a key pair for signing from the seed phrase</para>
            <para>Validates the seed phrase, generates master key and then derives</para>
            <para>the key pair from the master key and the specified path</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.HdkeyXprvFromMnemonic(EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic,System.Threading.CancellationToken)">
            <summary>
            Generates an extended master private key that will be the root for all the derived keys
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.HdkeyDeriveFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Returns extended private key derived from the specified extended private key and child index
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.HdkeyDeriveFromXprvPath(EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrvPath,System.Threading.CancellationToken)">
            <summary>
            Derives the extended private key from the specified key and path
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.HdkeySecretFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeySecretFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Extracts the private key from the serialized extended private key
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.HdkeyPublicFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeyPublicFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Extracts the public key from the serialized extended private key
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.Chacha20(EverscaleNet.Client.Models.ParamsOfChaCha20,System.Threading.CancellationToken)">
            <summary>
            Performs symmetric `chacha20` encryption.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.RegisterSigningBox(System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Register an application implemented signing box.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.GetSigningBox(EverscaleNet.Client.Models.KeyPair,System.Threading.CancellationToken)">
            <summary>
            Creates a default signing box implementation.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.SigningBoxGetPublicKey(EverscaleNet.Client.Models.RegisteredSigningBox,System.Threading.CancellationToken)">
            <summary>
            Returns public key of signing key pair.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.SigningBoxSign(EverscaleNet.Client.Models.ParamsOfSigningBoxSign,System.Threading.CancellationToken)">
            <summary>
            Returns signed user data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.RemoveSigningBox(EverscaleNet.Client.Models.RegisteredSigningBox,System.Threading.CancellationToken)">
            <summary>
            Removes signing box from SDK.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.RegisterEncryptionBox(System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Register an application implemented encryption box.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.RemoveEncryptionBox(EverscaleNet.Client.Models.RegisteredEncryptionBox,System.Threading.CancellationToken)">
            <summary>
            Removes encryption box from SDK
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.EncryptionBoxGetInfo(EverscaleNet.Client.Models.ParamsOfEncryptionBoxGetInfo,System.Threading.CancellationToken)">
            <summary>
            Queries info from the given encryption box
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.EncryptionBoxEncrypt(EverscaleNet.Client.Models.ParamsOfEncryptionBoxEncrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Encrypts data using given encryption box Note.</para>
            <para>Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after</para>
            <para>decryption to retrieve the original data from decrypted data.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.EncryptionBoxDecrypt(EverscaleNet.Client.Models.ParamsOfEncryptionBoxDecrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Decrypts data using given encryption box Note.</para>
            <para>Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after</para>
            <para>decryption to retrieve the original data from decrypted data.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ICryptoModule.CreateEncryptionBox(EverscaleNet.Client.Models.ParamsOfCreateEncryptionBox,System.Threading.CancellationToken)">
            <summary>
            Creates encryption box with specified algorithm
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IDebotModule">
            <summary>
            Debot Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Init(EverscaleNet.Client.Models.ParamsOfInit,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Creates and instance of DeBot.</para>
            <para>Downloads debot smart contract (code and data) from blockchain and creates</para>
            <para>an instance of Debot Engine for it.</para>
            <para># Remarks</para>
            <para>It does not switch debot to context 0. Browser Callbacks are not called.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Start(EverscaleNet.Client.Models.ParamsOfStart,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Starts the DeBot.</para>
            <para>Downloads debot smart contract from blockchain and switches it to</para>
            <para>context zero.</para>
            <para>This function must be used by Debot Browser to start a dialog with debot.</para>
            <para>While the function is executing, several Browser Callbacks can be called,</para>
            <para>since the debot tries to display all actions from the context 0 to the user.</para>
            <para>When the debot starts SDK registers `BrowserCallbacks` AppObject.</para>
            <para>Therefore when `debote.remove` is called the debot is being deleted and the callback is called</para>
            <para>with `finish`=`true` which indicates that it will never be used again.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Fetch(EverscaleNet.Client.Models.ParamsOfFetch,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Fetches DeBot metadata from blockchain.</para>
            <para>Downloads DeBot from blockchain and creates and fetches its metadata.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Execute(EverscaleNet.Client.Models.ParamsOfExecute,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Executes debot action.</para>
            <para>Calls debot engine referenced by debot handle to execute input action.</para>
            <para>Calls Debot Browser Callbacks if needed.</para>
            <para># Remarks</para>
            <para>Chain of actions can be executed if input action generates a list of subactions.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Send(EverscaleNet.Client.Models.ParamsOfSend,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Sends message to Debot.</para>
            <para>Used by Debot Browser to send response on Dinterface call or from other Debots.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IDebotModule.Remove(EverscaleNet.Client.Models.ParamsOfRemove,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Destroys debot handle.</para>
            <para>Removes handle from Client Context and drops debot engine referenced by that handle.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.INetModule">
            <summary>
            Net Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.Query(EverscaleNet.Client.Models.ParamsOfQuery,System.Threading.CancellationToken)">
            <summary>
            Performs DAppServer GraphQL query.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.BatchQuery(EverscaleNet.Client.Models.ParamsOfBatchQuery,System.Threading.CancellationToken)">
            <summary>
            Performs multiple queries per single fetch.
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.QueryCollection(EverscaleNet.Client.Models.ParamsOfQueryCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Queries collection data</para>
            <para>Queries data that satisfies the `filter` conditions,</para>
            <para>limits the number of returned records and orders them.</para>
            <para>The projection fields are limited to `result` fields</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.AggregateCollection(EverscaleNet.Client.Models.ParamsOfAggregateCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Aggregates collection data.</para>
            <para>Aggregates values from the specified `fields` for records</para>
            <para>that satisfies the `filter` conditions,</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.WaitForCollection(EverscaleNet.Client.Models.ParamsOfWaitForCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an object that fulfills the conditions or waits for its appearance</para>
            <para>Triggers only once.</para>
            <para>If object that satisfies the `filter` conditions</para>
            <para>already exists - returns it immediately.</para>
            <para>If not - waits for insert/update of data within the specified `timeout`,</para>
            <para>and returns it.</para>
            <para>The projection fields are limited to `result` fields</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.Unsubscribe(EverscaleNet.Client.Models.ResultOfSubscribeCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Cancels a subscription</para>
            <para>Cancels a subscription specified by its handle.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.SubscribeCollection(EverscaleNet.Client.Models.ParamsOfSubscribeCollection,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a collection subscription</para>
            <para>Triggers for each insert/update of data that satisfies</para>
            <para>the `filter` conditions.</para>
            <para>The projection fields are limited to `result` fields.</para>
            <para>The subscription is a persistent communication channel between</para>
            <para>client and Free TON Network.</para>
            <para>All changes in the blockchain will be reflected in realtime.</para>
            <para>Changes means inserts and updates of the blockchain entities.</para>
            <para>### Important Notes on Subscriptions</para>
            <para>Unfortunately sometimes the connection with the network brakes down.</para>
            <para>In this situation the library attempts to reconnect to the network.</para>
            <para>This reconnection sequence can take significant time.</para>
            <para>All of this time the client is disconnected from the network.</para>
            <para>Bad news is that all blockchain changes that happened while</para>
            <para>the client was disconnected are lost.</para>
            <para>Good news is that the client report errors to the callback when</para>
            <para>it loses and resumes connection.</para>
            <para>So, if the lost changes are important to the application then</para>
            <para>the application must handle these error reports.</para>
            <para>Library reports errors with `responseType` == 101</para>
            <para>and the error object passed via `params`.</para>
            <para>When the library has successfully reconnected</para>
            <para>the application receives callback with</para>
            <para>`responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).</para>
            <para>Application can use several ways to handle this situation:</para>
            <para>- If application monitors changes for the single blockchain</para>
            <para>object (for example specific account):  application</para>
            <para>can perform a query for this object and handle actual data as a</para>
            <para>regular data from the subscription.</para>
            <para>- If application monitors sequence of some blockchain objects</para>
            <para>(for example transactions of the specific account): application must</para>
            <para>refresh all cached (or visible to user) lists where this sequences presents.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.Subscribe(EverscaleNet.Client.Models.ParamsOfSubscribe,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a subscription</para>
            <para>The subscription is a persistent communication channel between</para>
            <para>client and Everscale Network.</para>
            <para>### Important Notes on Subscriptions</para>
            <para>Unfortunately sometimes the connection with the network brakes down.</para>
            <para>In this situation the library attempts to reconnect to the network.</para>
            <para>This reconnection sequence can take significant time.</para>
            <para>All of this time the client is disconnected from the network.</para>
            <para>Bad news is that all changes that happened while</para>
            <para>the client was disconnected are lost.</para>
            <para>Good news is that the client report errors to the callback when</para>
            <para>it loses and resumes connection.</para>
            <para>So, if the lost changes are important to the application then</para>
            <para>the application must handle these error reports.</para>
            <para>Library reports errors with `responseType` == 101</para>
            <para>and the error object passed via `params`.</para>
            <para>When the library has successfully reconnected</para>
            <para>the application receives callback with</para>
            <para>`responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).</para>
            <para>Application can use several ways to handle this situation:</para>
            <para>- If application monitors changes for the single</para>
            <para>object (for example specific account):  application</para>
            <para>can perform a query for this object and handle actual data as a</para>
            <para>regular data from the subscription.</para>
            <para>- If application monitors sequence of some objects</para>
            <para>(for example transactions of the specific account): application must</para>
            <para>refresh all cached (or visible to user) lists where this sequences presents.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.Suspend(System.Threading.CancellationToken)">
            <summary>
            Suspends network module to stop any network activity
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.Resume(System.Threading.CancellationToken)">
            <summary>
            Resumes network module to enable network activity
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.FindLastShardBlock(EverscaleNet.Client.Models.ParamsOfFindLastShardBlock,System.Threading.CancellationToken)">
            <summary>
            Returns ID of the last block in a specified account shard
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.FetchEndpoints(System.Threading.CancellationToken)">
            <summary>
            Requests the list of alternative endpoints from server
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.SetEndpoints(EverscaleNet.Client.Models.EndpointsSet,System.Threading.CancellationToken)">
            <summary>
            Sets the list of endpoints to use on reinit
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.GetEndpoints(System.Threading.CancellationToken)">
            <summary>
            Requests the list of alternative endpoints from server
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.QueryCounterparties(EverscaleNet.Client.Models.ParamsOfQueryCounterparties,System.Threading.CancellationToken)">
            <summary>
            <para>Allows to query and paginate through the list of accounts that the specified account has interacted with, sorted by the time of the last internal message between accounts</para>
            <para>*Attention* this query retrieves data from 'Counterparties' service which is not supported in</para>
            <para>the opensource version of DApp Server (and will not be supported) as well as in TON OS SE (will be supported in SE in future),</para>
            <para>but is always accessible via [TON OS Devnet/Mainnet Clouds](https://docs.ton.dev/86757ecb2/p/85c869-networks)</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.QueryTransactionTree(EverscaleNet.Client.Models.ParamsOfQueryTransactionTree,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a tree of transactions triggered by a specific message.</para>
            <para>Performs recursive retrieval of a transactions tree produced by a specific message:</para>
            <para>in_msg -&gt; dst_transaction -&gt; out_messages -&gt; dst_transaction -&gt; ...</para>
            <para>If the chain of transactions execution is in progress while the function is running,</para>
            <para>it will wait for the next transactions to appear until the full tree or more than 50 transactions</para>
            <para>are received.</para>
            <para>All the retrieved messages and transactions are included</para>
            <para>into `result.messages` and `result.transactions` respectively.</para>
            <para>Function reads transactions layer by layer, by pages of 20 transactions.</para>
            <para>The retrieval prosess goes like this:</para>
            <para>Let's assume we have an infinite chain of transactions and each transaction generates 5 messages.</para>
            <para>1. Retrieve 1st message (input parameter) and corresponding transaction - put it into result.</para>
            <para>It is the first level of the tree of transactions - its root.</para>
            <para>Retrieve 5 out message ids from the transaction for next steps.</para>
            <para>2. Retrieve 5 messages and corresponding transactions on the 2nd layer. Put them into result.</para>
            <para>Retrieve 5*5 out message ids from these transactions for next steps</para>
            <para>3. Retrieve 20 (size of the page) messages and transactions (3rd layer) and 20*5=100 message ids (4th layer).</para>
            <para>4. Retrieve the last 5 messages and 5 transactions on the 3rd layer + 15 messages and transactions (of 100) from the 4th layer</para>
            <para>+ 25 message ids of the 4th layer + 75 message ids of the 5th layer.</para>
            <para>5. Retrieve 20 more messages and 20 more transactions of the 4th layer + 100 more message ids of the 5th layer.</para>
            <para>6. Now we have 1+5+20+20+20 = 66 transactions, which is more than 50. Function exits with the tree of</para>
            <para>1m-&gt;1t-&gt;5m-&gt;5t-&gt;25m-&gt;25t-&gt;35m-&gt;35t. If we see any message ids in the last transactions out_msgs, which don't have</para>
            <para>corresponding messages in the function result, it means that the full tree was not received and we need to continue iteration.</para>
            <para>To summarize, it is guaranteed that each message in `result.messages` has the corresponding transaction</para>
            <para>in the `result.transactions`.</para>
            <para>But there is no guarantee that all messages from transactions `out_msgs` are</para>
            <para>presented in `result.messages`.</para>
            <para>So the application has to continue retrieval for missing messages if it requires.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.CreateBlockIterator(EverscaleNet.Client.Models.ParamsOfCreateBlockIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Creates block iterator.</para>
            <para>Block iterator uses robust iteration methods that guaranties that every</para>
            <para>block in the specified range isn't missed or iterated twice.</para>
            <para>Iterated range can be reduced with some filters:</para>
            <para>- `start_time` – the bottom time range. Only blocks with `gen_utime`</para>
            <para>more or equal to this value is iterated. If this parameter is omitted then there is</para>
            <para>no bottom time edge, so all blocks since zero state is iterated.</para>
            <para>- `end_time` – the upper time range. Only blocks with `gen_utime`</para>
            <para>less then this value is iterated. If this parameter is omitted then there is</para>
            <para>no upper time edge, so iterator never finishes.</para>
            <para>- `shard_filter` – workchains and shard prefixes that reduce the set of interesting</para>
            <para>blocks. Block conforms to the shard filter if it belongs to the filter workchain</para>
            <para>and the first bits of block's `shard` fields matches to the shard prefix.</para>
            <para>Only blocks with suitable shard are iterated.</para>
            <para>Items iterated is a JSON objects with block data. The minimal set of returned</para>
            <para>fields is:</para>
            <para>```text</para>
            <para>id</para>
            <para>gen_utime</para>
            <para>workchain_id</para>
            <para>shard</para>
            <para>after_split</para>
            <para>after_merge</para>
            <para>prev_ref {</para>
            <para>    root_hash</para>
            <para>}</para>
            <para>prev_alt_ref {</para>
            <para>    root_hash</para>
            <para>}</para>
            <para>```</para>
            <para>Application can request additional fields in the `result` parameter.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.ResumeBlockIterator(EverscaleNet.Client.Models.ParamsOfResumeBlockIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Resumes block iterator.</para>
            <para>The iterator stays exactly at the same position where the `resume_state` was catched.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.CreateTransactionIterator(EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Creates transaction iterator.</para>
            <para>Transaction iterator uses robust iteration methods that guaranty that every</para>
            <para>transaction in the specified range isn't missed or iterated twice.</para>
            <para>Iterated range can be reduced with some filters:</para>
            <para>- `start_time` – the bottom time range. Only transactions with `now`</para>
            <para>more or equal to this value are iterated. If this parameter is omitted then there is</para>
            <para>no bottom time edge, so all the transactions since zero state are iterated.</para>
            <para>- `end_time` – the upper time range. Only transactions with `now`</para>
            <para>less then this value are iterated. If this parameter is omitted then there is</para>
            <para>no upper time edge, so iterator never finishes.</para>
            <para>- `shard_filter` – workchains and shard prefixes that reduce the set of interesting</para>
            <para>accounts. Account address conforms to the shard filter if</para>
            <para>it belongs to the filter workchain and the first bits of address match to</para>
            <para>the shard prefix. Only transactions with suitable account addresses are iterated.</para>
            <para>- `accounts_filter` – set of account addresses whose transactions must be iterated.</para>
            <para>Note that accounts filter can conflict with shard filter so application must combine</para>
            <para>these filters carefully.</para>
            <para>Iterated item is a JSON objects with transaction data. The minimal set of returned</para>
            <para>fields is:</para>
            <para>```text</para>
            <para>id</para>
            <para>account_addr</para>
            <para>now</para>
            <para>balance_delta(format:DEC)</para>
            <para>bounce { bounce_type }</para>
            <para>in_message {</para>
            <para>    id</para>
            <para>    value(format:DEC)</para>
            <para>    msg_type</para>
            <para>    src</para>
            <para>}</para>
            <para>out_messages {</para>
            <para>    id</para>
            <para>    value(format:DEC)</para>
            <para>    msg_type</para>
            <para>    dst</para>
            <para>}</para>
            <para>```</para>
            <para>Application can request an additional fields in the `result` parameter.</para>
            <para>Another parameter that affects on the returned fields is the `include_transfers`.</para>
            <para>When this parameter is `true` the iterator computes and adds `transfer` field containing</para>
            <para>list of the useful `TransactionTransfer` objects.</para>
            <para>Each transfer is calculated from the particular message related to the transaction</para>
            <para>and has the following structure:</para>
            <para>- message – source message identifier.</para>
            <para>- isBounced – indicates that the transaction is bounced, which means the value will be returned back to the sender.</para>
            <para>- isDeposit – indicates that this transfer is the deposit (true) or withdraw (false).</para>
            <para>- counterparty – account address of the transfer source or destination depending on `isDeposit`.</para>
            <para>- value – amount of nano tokens transferred. The value is represented as a decimal string</para>
            <para>because the actual value can be more precise than the JSON number can represent. Application</para>
            <para>must use this string carefully – conversion to number can follow to loose of precision.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.ResumeTransactionIterator(EverscaleNet.Client.Models.ParamsOfResumeTransactionIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Resumes transaction iterator.</para>
            <para>The iterator stays exactly at the same position where the `resume_state` was caught.</para>
            <para>Note that `resume_state` doesn't store the account filter. If the application requires</para>
            <para>to use the same account filter as it was when the iterator was created then the application</para>
            <para>must pass the account filter again in `accounts_filter` parameter.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.IteratorNext(EverscaleNet.Client.Models.ParamsOfIteratorNext,System.Threading.CancellationToken)">
            <summary>
            <para>Returns next available items.</para>
            <para>In addition to available items this function returns the `has_more` flag</para>
            <para>indicating that the iterator isn't reach the end of the iterated range yet.</para>
            <para>This function can return the empty list of available items but</para>
            <para>indicates that there are more items is available.</para>
            <para>This situation appears when the iterator doesn't reach iterated range</para>
            <para>but database doesn't contains available items yet.</para>
            <para>If application requests resume state in `return_resume_state` parameter</para>
            <para>then this function returns `resume_state` that can be used later to</para>
            <para>resume the iteration from the position after returned items.</para>
            <para>The structure of the items returned depends on the iterator used.</para>
            <para>See the description to the appropriated iterator creation function.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.INetModule.RemoveIterator(EverscaleNet.Client.Models.RegisteredIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Removes an iterator</para>
            <para>Frees all resources allocated in library to serve iterator.</para>
            <para>Application always should call the `remove_iterator` when iterator</para>
            <para>is no longer required.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IProcessingModule">
            <summary>
            Processing Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProcessingModule.SendMessage(EverscaleNet.Client.Models.ParamsOfSendMessage,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Sends message to the network</para>
            <para>Sends message to the network and returns the last generated shard block of the destination account</para>
            <para>before the message was sent. It will be required later for message processing.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProcessingModule.WaitForTransaction(EverscaleNet.Client.Models.ParamsOfWaitForTransaction,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Performs monitoring of the network for the result transaction of the external inbound message processing.</para>
            <para>`send_events` enables intermediate events, such as `WillFetchNextBlock`,</para>
            <para>`FetchNextBlockFailed` that may be useful for logging of new shard blocks creation</para>
            <para>during message processing.</para>
            <para>Note, that presence of the `abi` parameter is critical for ABI</para>
            <para>compliant contracts. Message processing uses drastically</para>
            <para>different strategy for processing message for contracts which</para>
            <para>ABI includes "expire" header.</para>
            <para>When the ABI header `expire` is present, the processing uses</para>
            <para>`message expiration` strategy:</para>
            <para>- The maximum block gen time is set to</para>
            <para>  `message_expiration_timeout + transaction_wait_timeout`.</para>
            <para>- When maximum block gen time is reached, the processing will</para>
            <para>  be finished with `MessageExpired` error.</para>
            <para>When the ABI header `expire` isn't present or `abi` parameter</para>
            <para>isn't specified, the processing uses `transaction waiting`</para>
            <para>strategy:</para>
            <para>- The maximum block gen time is set to</para>
            <para>  `now() + transaction_wait_timeout`.</para>
            <para>- If maximum block gen time is reached and no result transaction is found,</para>
            <para>the processing will exit with an error.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProcessingModule.ProcessMessage(EverscaleNet.Client.Models.ParamsOfProcessMessage,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates message, sends it to the network and monitors its processing.</para>
            <para>Creates ABI-compatible message,</para>
            <para>sends it to the network and monitors for the result transaction.</para>
            <para>Decodes the output messages' bodies.</para>
            <para>If contract's ABI includes "expire" header, then</para>
            <para>SDK implements retries in case of unsuccessful message delivery within the expiration</para>
            <para>timeout: SDK recreates the message, sends it and processes it again.</para>
            <para>The intermediate events, such as `WillFetchFirstBlock`, `WillSend`, `DidSend`,</para>
            <para>`WillFetchNextBlock`, etc - are switched on/off by `send_events` flag</para>
            <para>and logged into the supplied callback function.</para>
            <para>The retry configuration parameters are defined in the client's `NetworkConfig` and `AbiConfig`.</para>
            <para>If contract's ABI does not include "expire" header</para>
            <para>then, if no transaction is found within the network timeout (see config parameter ), exits with error.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IProofsModule">
            <summary>
            Proofs Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProofsModule.ProofBlockData(EverscaleNet.Client.Models.ParamsOfProofBlockData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given block's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function checks block proofs and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input param is a single block's JSON object, which was queried from DApp server using</para>
            <para>functions such as `net.query`, `net.query_collection` or `net.wait_for_collection`.</para>
            <para>If block's BOC is not provided in the JSON, it will be queried from DApp server</para>
            <para>(in this case it is required to provide at least `id` of block).</para>
            <para>Please note, that joins (like `signatures` in `Block`) are separated entities and not supported,</para>
            <para>so function will throw an exception in a case if JSON being checked has such entities in it.</para>
            <para>If `cache_in_local_storage` in config is set to `true` (default), downloaded proofs and</para>
            <para>master-chain BOCs are saved into the persistent local storage (e.g. file system for native</para>
            <para>environments or browser's IndexedDB for the web); otherwise all the data is cached only in</para>
            <para>memory in current client's context and will be lost after destruction of the client.</para>
            <para>**Why Proofs are needed**</para>
            <para>Proofs are needed to ensure that the data downloaded from a DApp server is real blockchain</para>
            <para>data. Checking proofs can protect from the malicious DApp server which can potentially provide</para>
            <para>fake data, or also from "Man in the Middle" attacks class.</para>
            <para>**What Proofs are**</para>
            <para>Simply, proof is a list of signatures of validators', which have signed this particular master-</para>
            <para>block.</para>
            <para>The very first validator set's public keys are included in the zero-state. Whe know a root hash</para>
            <para>of the zero-state, because it is stored in the network configuration file, it is our authority</para>
            <para>root. For proving zero-state it is enough to calculate and compare its root hash.</para>
            <para>In each new validator cycle the validator set is changed. The new one is stored in a key-block,</para>
            <para>which is signed by the validator set, which we already trust, the next validator set will be</para>
            <para>stored to the new key-block and signed by the current validator set, and so on.</para>
            <para>In order to prove any block in the master-chain we need to check, that it has been signed by</para>
            <para>a trusted validator set. So we need to check all key-blocks' proofs, started from the zero-state</para>
            <para>and until the block, which we want to prove. But it can take a lot of time and traffic to</para>
            <para>download and prove all key-blocks on a client. For solving this, special trusted blocks are used</para>
            <para>in TON-SDK.</para>
            <para>The trusted block is the authority root, as well, as the zero-state. Each trusted block is the</para>
            <para>`id` (e.g. `root_hash`) of the already proven key-block. There can be plenty of trusted</para>
            <para>blocks, so there can be a lot of authority roots. The hashes of trusted blocks for MainNet</para>
            <para>and DevNet are hardcoded in SDK in a separated binary file (trusted_key_blocks.bin) and can</para>
            <para>be updated for each release.</para>
            <para>In future SDK releases, one will also be able to provide their hashes of trusted blocks for</para>
            <para>other networks, besides for MainNet and DevNet.</para>
            <para>By using trusted key-blocks, in order to prove any block, we can prove chain of key-blocks to</para>
            <para>the closest previous trusted key-block, not only to the zero-state.</para>
            <para>But shard-blocks don't have proofs on DApp server. In this case, in order to prove any shard-</para>
            <para>block data, we search for a corresponding master-block, which contains the root hash of this</para>
            <para>shard-block, or some shard block which is linked to that block in shard-chain. After proving</para>
            <para>this master-block, we traverse through each link and calculate and compare hashes with links,</para>
            <para>one-by-one. After that we can ensure that this shard-block has also been proven.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProofsModule.ProofTransactionData(EverscaleNet.Client.Models.ParamsOfProofTransactionData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given transaction's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function requests the corresponding block, checks block proofs, ensures that given</para>
            <para>transaction exists in the proven block and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input parameter is a single transaction's JSON object (see params description),</para>
            <para>which was queried from TONOS API using functions such as `net.query`, `net.query_collection`</para>
            <para>or `net.wait_for_collection`.</para>
            <para>If transaction's BOC and/or `block_id` are not provided in the JSON, they will be queried from</para>
            <para>TONOS API.</para>
            <para>Please note, that joins (like `account`, `in_message`, `out_messages`, etc. in `Transaction`</para>
            <para>entity) are separated entities and not supported, so function will throw an exception in a case</para>
            <para>if JSON being checked has such entities in it.</para>
            <para>For more information about proofs checking, see description of `proof_block_data` function.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IProofsModule.ProofMessageData(EverscaleNet.Client.Models.ParamsOfProofMessageData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given message's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function first proves the corresponding transaction, ensures that the proven transaction</para>
            <para>refers to the given message and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input parameter is a single message's JSON object (see params description),</para>
            <para>which was queried from TONOS API using functions such as `net.query`, `net.query_collection`</para>
            <para>or `net.wait_for_collection`.</para>
            <para>If message's BOC and/or non-null `src_transaction.id` or `dst_transaction.id` are not provided</para>
            <para>in the JSON, they will be queried from TONOS API.</para>
            <para>Please note, that joins (like `block`, `dst_account`, `dst_transaction`, `src_account`,</para>
            <para>`src_transaction`, etc. in `Message` entity) are separated entities and not supported,</para>
            <para>so function will throw an exception in a case if JSON being checked has such entities in it.</para>
            <para>For more information about proofs checking, see description of `proof_block_data` function.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.ITvmModule">
            <summary>
            Tvm Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ITvmModule.RunExecutor(EverscaleNet.Client.Models.ParamsOfRunExecutor,System.Threading.CancellationToken)">
            <summary>
            <para>Emulates all the phases of contract execution locally</para>
            <para>Performs all the phases of contract execution on Transaction Executor -</para>
            <para>the same component that is used on Validator Nodes.</para>
            <para>Can be used for contract debugging, to find out the reason why a message was not delivered successfully.</para>
            <para>Validators throw away the failed external inbound messages (if they failed bedore `ACCEPT`) in the real network.</para>
            <para>This is why these messages are impossible to debug in the real network.</para>
            <para>With the help of run_executor you can do that. In fact, `process_message` function</para>
            <para>performs local check with `run_executor` if there was no transaction as a result of processing</para>
            <para>and returns the error, if there is one.</para>
            <para>Another use case to use `run_executor` is to estimate fees for message execution.</para>
            <para>Set  `AccountForExecutor::Account.unlimited_balance`</para>
            <para>to `true` so that emulation will not depend on the actual balance.</para>
            <para>This may be needed to calculate deploy fees for an account that does not exist yet.</para>
            <para>JSON with fees is in `fees` field of the result.</para>
            <para>One more use case - you can produce the sequence of operations,</para>
            <para>thus emulating the sequential contract calls locally.</para>
            <para>And so on.</para>
            <para>Transaction executor requires account BOC (bag of cells) as a parameter.</para>
            <para>To get the account BOC - use `net.query` method to download it from GraphQL API</para>
            <para>(field `boc` of `account`) or generate it with `abi.encode_account` method.</para>
            <para>Also it requires message BOC. To get the message BOC - use `abi.encode_message` or `abi.encode_internal_message`.</para>
            <para>If you need this emulation to be as precise as possible (for instance - emulate transaction</para>
            <para>with particular lt in particular block or use particular blockchain config,</para>
            <para>downloaded from a particular key block - then specify `execution_options` parameter.</para>
            <para>If you need to see the aborted transaction as a result, not as an error, set `skip_transaction_check` to `true`.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ITvmModule.RunTvm(EverscaleNet.Client.Models.ParamsOfRunTvm,System.Threading.CancellationToken)">
            <summary>
            <para>Executes get-methods of ABI-compatible contracts</para>
            <para>Performs only a part of compute phase of transaction execution</para>
            <para>that is used to run get-methods of ABI-compatible contracts.</para>
            <para>If you try to run get-methods with `run_executor` you will get an error, because it checks ACCEPT and exits</para>
            <para>if there is none, which is actually true for get-methods.</para>
            <para> To get the account BOC (bag of cells) - use `net.query` method to download it from GraphQL API</para>
            <para>(field `boc` of `account`) or generate it with `abi.encode_account method`.</para>
            <para>To get the message BOC - use `abi.encode_message` or prepare it any other way, for instance, with FIFT script.</para>
            <para>Attention! Updated account state is produces as well, but only</para>
            <para>`account_state.storage.state.data`  part of the BOC is updated.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.ITvmModule.RunGet(EverscaleNet.Client.Models.ParamsOfRunGet,System.Threading.CancellationToken)">
            <summary>
            <para>Executes a get-method of FIFT contract</para>
            <para>Executes a get-method of FIFT contract that fulfills the smc-guidelines https://test.ton.org/smc-guidelines.txt</para>
            <para>and returns the result data from TVM's stack</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Abstract.Modules.IUtilsModule">
            <summary>
            Utils Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IUtilsModule.ConvertAddress(EverscaleNet.Client.Models.ParamsOfConvertAddress,System.Threading.CancellationToken)">
            <summary>
            Converts address from any TON format to any TON format
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IUtilsModule.GetAddressType(EverscaleNet.Client.Models.ParamsOfGetAddressType,System.Threading.CancellationToken)">
            <summary>
            <para>Validates and returns the type of any TON address.</para>
            <para>Address types are the following</para>
            <para>`0:919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - standard TON address most</para>
            <para>commonly used in all cases. Also called as hex address</para>
            <para>`919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - account ID. A part of full</para>
            <para>address. Identifies account inside particular workchain</para>
            <para>`EQCRnbjnQNUL80nfLuoD+jDDhdhGuZH/VULmcJjugz/H9wam` - base64 address. Also called "user-friendly".</para>
            <para>Was used at the beginning of TON. Now it is supported for compatibility</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IUtilsModule.CalcStorageFee(EverscaleNet.Client.Models.ParamsOfCalcStorageFee,System.Threading.CancellationToken)">
            <summary>
            Calculates storage fee for an account over a specified time period
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IUtilsModule.CompressZstd(EverscaleNet.Client.Models.ParamsOfCompressZstd,System.Threading.CancellationToken)">
            <summary>
            Compresses data using Zstandard algorithm
            </summary>
        </member>
        <member name="M:EverscaleNet.Abstract.Modules.IUtilsModule.DecompressZstd(EverscaleNet.Client.Models.ParamsOfDecompressZstd,System.Threading.CancellationToken)">
            <summary>
            Decompresses data using Zstandard algorithm
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.EverClient">
            <summary>
            EverClient
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.EverClient.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Client">
            <summary>
            Provides information about library.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Crypto">
            <summary>
            Crypto functions.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Abi">
            <summary>
            Provides message encoding and decoding according to the ABI specification.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Boc">
            <summary>
            BOC manipulation module.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Processing">
            <summary>
            <para>Message processing module.</para>
            <para>This module incorporates functions related to complex message</para>
            <para>processing scenarios.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Utils">
            <summary>
            Misc utility Functions.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Tvm">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Net">
            <summary>
            Network access.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Debot">
            <summary>
            [UNSTABLE](UNSTABLE.md) Module for working with debot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.EverClient.Proofs">
            <summary>
            [UNSTABLE](UNSTABLE.md) Module for proving data, retrieved from TONOS API.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Abi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Abi.Contract">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Abi.Contract.Value">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Abi.Json">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Abi.Json.Value">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Abi.Handle">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Abi.Handle.Value">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Abi.Serialized">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Abi.Serialized.Value">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiConfig.Workchain">
            <summary>
            Workchain id that is used by default in DeploySet
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiConfig.MessageExpirationTimeout">
            <summary>
            Message lifetime for contracts which ABI includes "expire" header. The default value is 40 sec.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiConfig.MessageExpirationTimeoutGrowFactor">
            <summary>
            Factor that increases the expiration timeout for each retry The default value is 1.5
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiContract">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.ABIVersion">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.AbiVersion">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Version">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Header">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Functions">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Events">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Data">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiContract.Fields">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiData.Key">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiData.Name">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiData.Type">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiData.Components">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.RequiredAddressMissingForEncodeMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.RequiredCallSetMissingForEncodeMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidJson">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.EncodeDeployMessageFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.EncodeRunMessageFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.AttachSignatureFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidTvcImage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.RequiredPublicKeyMissingForFunctionHeader">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidSigner">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidAbi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidFunctionId">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.InvalidData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AbiErrorCode.EncodeInitialDataFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiEvent">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiEvent.Name">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiEvent.Inputs">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiEvent.Id">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiFunction">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiFunction.Name">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiFunction.Inputs">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiFunction.Outputs">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiFunction.Id">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AbiParam">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiParam.Name">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiParam.Type">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AbiParam.Components">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AccountAddressType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AccountAddressType.AccountId">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AccountAddressType.Hex">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AccountAddressType.Base64">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AccountForExecutor">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AccountForExecutor.None">
            <summary>
            Non-existing account to run a creation internal message. Should be used with `skip_transaction_check = true` if the message has no deploy data since transactions on the uninitialized account are always aborted
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AccountForExecutor.Uninit">
            <summary>
            Emulate uninitialized account to run deploy message
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AccountForExecutor.Account">
            <summary>
            Account state to run message
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AccountForExecutor.Account.Boc">
            <summary>
            Account state to run message
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AccountForExecutor.Account.UnlimitedBalance">
            <summary>
            Account state to run message
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AddressStringFormat">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AddressStringFormat.AccountId">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AddressStringFormat.Hex">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AddressStringFormat.Base64">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AddressStringFormat.Base64.Url">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AddressStringFormat.Base64.Test">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AddressStringFormat.Base64.Bounce">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AesInfo">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AesInfo.Mode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AesInfo.Iv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AesParams">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AesParams.Mode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AesParams.Key">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AesParams.Iv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AggregationFn">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AggregationFn.COUNT">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AggregationFn.MIN">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AggregationFn.MAX">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AggregationFn.SUM">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.AggregationFn.AVERAGE">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AppRequestResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AppRequestResult.Error">
            <summary>
            Error occurred during request processing
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AppRequestResult.Error.Text">
            <summary>
            Error occurred during request processing
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.AppRequestResult.Ok">
            <summary>
            Request processed successfully
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.AppRequestResult.Ok.Result">
            <summary>
            Request processed successfully
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BocCacheType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BocCacheType.Pinned">
            <summary>
            <para>Pin the BOC with `pin` name.</para>
            <para>Such BOC will not be removed from cache until it is unpinned</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BocCacheType.Pinned.Pin">
            <summary>
            <para>Pin the BOC with `pin` name.</para>
            <para>Such BOC will not be removed from cache until it is unpinned</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BocCacheType.Unpinned">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BocConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BocConfig.CacheMaxSize">
            <summary>
            <para>Maximum BOC cache size in kilobytes.</para>
            <para>Default is 10 MB</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BocErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.InvalidBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.SerializationError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.InappropriateBlock">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.MissingSourceBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.InsufficientCacheSize">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.BocRefNotFound">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.BocErrorCode.InvalidBocRef">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp">
            <summary>
            Cell builder operation.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp.Integer">
            <summary>
            Append integer to cell data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.Integer.Size">
            <summary>
            Append integer to cell data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.Integer.Value">
            <summary>
            Append integer to cell data.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp.BitString">
            <summary>
            Append bit string to cell data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.BitString.Value">
            <summary>
            Append bit string to cell data.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp.Cell">
            <summary>
            Append ref to nested cells.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.Cell.Builder">
            <summary>
            Append ref to nested cells.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp.CellBoc">
            <summary>
            Append ref to nested cell.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.CellBoc.Boc">
            <summary>
            Append ref to nested cell.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuilderOp.Address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuilderOp.Address.AddressAccessor">
            <summary>
            Address.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.BuildInfoDependency">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuildInfoDependency.Name">
            <summary>
            <para>Dependency name.</para>
            <para>Usually it is a crate name.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.BuildInfoDependency.GitCommit">
            <summary>
            Git commit hash of the related repository.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.CallSet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CallSet.FunctionName">
            <summary>
            Function name that is being called. Or function id encoded as string in hex (starting with 0x).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CallSet.Header">
            <summary>
            <para>Function header.</para>
            <para>If an application omits some header parameters required by the</para>
            <para>contract's ABI, the library will set the default values for</para>
            <para>them.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CallSet.Input">
            <summary>
            Function input parameters according to ABI.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.CipherMode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CipherMode.CBC">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CipherMode.CFB">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CipherMode.CTR">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CipherMode.ECB">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CipherMode.OFB">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ClientConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.Network">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.Crypto">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.Abi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.Boc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.Proofs">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientConfig.LocalStoragePath">
            <summary>
            For file based storage is a folder name where SDK will store its data. For browser based is a browser async storage key prefix. Default (recommended) value is "~/.tonclient" for native environments and ".tonclient" for web-browser.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ClientError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientError.Code">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientError.Message">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ClientError.Data">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ClientErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.NotImplemented">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidHex">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidBase64">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidAddress">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CallbackParamsCantBeConvertedToJson">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.WebsocketConnectError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.WebsocketReceiveError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.WebsocketSendError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.HttpClientCreateError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.HttpRequestCreateError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.HttpRequestSendError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.HttpRequestParseError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CallbackNotRegistered">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.NetModuleNotInit">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CannotCreateRuntime">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidContextHandle">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CannotSerializeResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CannotSerializeError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CannotConvertJsValueToJson">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CannotReceiveSpawnedResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.SetTimerError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidParams">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.ContractsAddressConversionFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.UnknownFunction">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.AppRequestError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.NoSuchRequest">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CanNotSendRequestResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CanNotReceiveRequestResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CanNotParseRequestResult">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.UnexpectedCallbackResponse">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.CanNotParseNumber">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InternalError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.InvalidHandle">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ClientErrorCode.LocalStorageError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.CryptoConfig">
            <summary>
            Crypto config.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CryptoConfig.MnemonicDictionary">
            <summary>
            Mnemonic dictionary that will be used by default in crypto functions. If not specified, 1 dictionary will be used.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CryptoConfig.MnemonicWordCount">
            <summary>
            Mnemonic word count that will be used by default in crypto functions. If not specified the default value will be 12.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.CryptoConfig.HdkeyDerivationPath">
            <summary>
            Derivation path that will be used by default in crypto functions. If not specified `m/44'/396'/0'/0/0` will be used.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.CryptoErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidPublicKey">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidSecretKey">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidKey">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidFactorizeChallenge">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidBigInt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.ScryptFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidKeySize">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.NaclSecretBoxFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.NaclBoxFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.NaclSignFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip39InvalidEntropy">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip39InvalidPhrase">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip32InvalidKey">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip32InvalidDerivePath">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip39InvalidDictionary">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.Bip39InvalidWordCount">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.MnemonicGenerationFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.MnemonicFromEntropyFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.SigningBoxNotRegistered">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidSignature">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.EncryptionBoxNotRegistered">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.InvalidIvSize">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.UnsupportedCipherMode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.CannotCreateCipher">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.EncryptDataError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.DecryptDataError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.CryptoErrorCode.IvRequired">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DebotAction">
            <summary>
            [UNSTABLE](UNSTABLE.md) Describes a debot action in a Debot Context.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.Description">
            <summary>
            <para>A short action description.</para>
            <para>Should be used by Debot Browser as name of menu item.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.Name">
            <summary>
            <para>Depends on action type.</para>
            <para>Can be a debot function name or a print string (for Print Action).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.ActionType">
            <summary>
            Action type.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.To">
            <summary>
            ID of debot context to switch after action execution.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.Attributes">
            <summary>
            <para>Action attributes.</para>
            <para>In the form of "param=value,flag". attribute example: instant, args, fargs, sign.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotAction.Misc">
            <summary>
            <para>Some internal action data.</para>
            <para>Used by debot only.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DebotActivity">
            <summary>
            [UNSTABLE](UNSTABLE.md) Describes the operation that the DeBot wants to perform.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DebotActivity.Transaction">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Msg">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Dst">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Out">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Fee">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Setcode">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.Signkey">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotActivity.Transaction.SigningBoxHandle">
            <summary>
            DeBot wants to create new transaction in blockchain.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DebotErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotStartFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotFetchFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotExecutionFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotInvalidHandle">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotInvalidJsonParams">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotInvalidFunctionId">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotInvalidAbi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotGetMethodFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotInvalidMsg">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotExternalCallFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotBrowserCallbackFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotOperationRejected">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.DebotErrorCode.DebotNoCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DebotInfo">
            <summary>
            [UNSTABLE](UNSTABLE.md) Describes DeBot metadata.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Name">
            <summary>
            DeBot short name.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Version">
            <summary>
            DeBot semantic version.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Publisher">
            <summary>
            The name of DeBot deployer.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Caption">
            <summary>
            Short info about DeBot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Author">
            <summary>
            The name of DeBot developer.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Support">
            <summary>
            TON address of author for questions and donations.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Hello">
            <summary>
            String with the first messsage from DeBot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Language">
            <summary>
            String with DeBot interface language (ISO-639).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Dabi">
            <summary>
            String with DeBot ABI.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Icon">
            <summary>
            DeBot icon.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.Interfaces">
            <summary>
            Vector with IDs of DInterfaces used by DeBot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DebotInfo.DabiVersion">
            <summary>
            ABI version ("x.y") supported by DeBot
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DecodedMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedMessageBody.BodyType">
            <summary>
            Type of the message body content.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedMessageBody.Name">
            <summary>
            Function or event name.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedMessageBody.Value">
            <summary>
            Parameters or result value.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedMessageBody.Header">
            <summary>
            Function header.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DecodedOutput">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedOutput.OutMessages">
            <summary>
            <para>Decoded bodies of the out messages.</para>
            <para>If the message can't be decoded, then `None` will be stored in</para>
            <para>the appropriate position.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DecodedOutput.Output">
            <summary>
            Decoded body of the function output message.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.DeploySet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DeploySet.Tvc">
            <summary>
            Content of TVC file encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DeploySet.WorkchainId">
            <summary>
            <para>Target workchain for destination address.</para>
            <para>Default is `0`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DeploySet.InitialData">
            <summary>
            List of initial values for contract's public variables.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.DeploySet.InitialPubkey">
            <summary>
            <para>Optional public key that can be provided in deploy set in order to substitute one in TVM file or provided by Signer.</para>
            <para>Public key resolving priority:</para>
            <para>1. Public key from deploy set.</para>
            <para>2. Public key, specified in TVM file.</para>
            <para>3. Public key, provided by Signer.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.EncryptionAlgorithm">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EncryptionAlgorithm.AES">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.EncryptionBoxInfo">
            <summary>
            Encryption box information
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EncryptionBoxInfo.Hdpath">
            <summary>
            Derivation path, for instance "m/44'/396'/0'/0/0"
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EncryptionBoxInfo.Algorithm">
            <summary>
            Cryptographic algorithm, used by this encryption box
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EncryptionBoxInfo.Options">
            <summary>
            Options, depends on algorithm and specific encryption box implementation
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EncryptionBoxInfo.Public">
            <summary>
            Public information, depends on algorithm
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.EndpointsSet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.EndpointsSet.Endpoints">
            <summary>
            List of endpoints provided by server
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ExecutionOptions">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ExecutionOptions.BlockchainConfig">
            <summary>
            boc with config
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ExecutionOptions.BlockTime">
            <summary>
            time that is used as transaction time
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ExecutionOptions.BlockLt">
            <summary>
            block logical time
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ExecutionOptions.TransactionLt">
            <summary>
            transaction logical time
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.FieldAggregation">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.FieldAggregation.Field">
            <summary>
            Dot separated path to the field
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.FieldAggregation.Fn">
            <summary>
            Aggregation function that must be applied to field values
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.FunctionHeader">
            <summary>
            <para>The ABI function header.</para>
            <para>Includes several hidden function parameters that contract</para>
            <para>uses for security, message delivery monitoring and replay protection reasons.</para>
            <para>The actual set of header fields depends on the contract's ABI.</para>
            <para>If a contract's ABI does not include some headers, then they are not filled.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.FunctionHeader.Expire">
            <summary>
            Message expiration time in seconds. If not specified - calculated automatically from message_expiration_timeout(), try_index and message_expiration_timeout_grow_factor() (if ABI includes `expire` header).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.FunctionHeader.Time">
            <summary>
            <para>Message creation time in milliseconds.</para>
            <para>If not specified, `now` is used (if ABI includes `time` header).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.FunctionHeader.Pubkey">
            <summary>
            <para>Public key is used by the contract to check the signature.</para>
            <para>Encoded in `hex`. If not specified, method fails with exception (if ABI includes `pubkey` header)..</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.KeyPair">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.KeyPair.Public">
            <summary>
            Public key - 64 symbols hex string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.KeyPair.Secret">
            <summary>
            Private key - u64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.MessageBodyType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.MessageBodyType.Input">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.MessageBodyType.Output">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.MessageBodyType.InternalOutput">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.MessageBodyType.Event">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.MessageNode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.Id">
            <summary>
            Message id.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.SrcTransactionId">
            <summary>
            <para>Source transaction id.</para>
            <para>This field is missing for an external inbound messages.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.DstTransactionId">
            <summary>
            <para>Destination transaction id.</para>
            <para>This field is missing for an external outbound messages.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.Src">
            <summary>
            Source address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.Dst">
            <summary>
            Destination address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.Value">
            <summary>
            Transferred tokens value.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.Bounce">
            <summary>
            Bounce flag.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageNode.DecodedBody">
            <summary>
            <para>Decoded body.</para>
            <para>Library tries to decode message body using provided `params.abi_registry`.</para>
            <para>This field will be missing if none of the provided abi can be used to decode.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.MessageSource">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.MessageSource.Encoded">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageSource.Encoded.Message">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageSource.Encoded.Abi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.MessageSource.EncodingParams">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.NetErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.QueryFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.SubscribeFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.WaitForFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.GetSubscriptionResultFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.InvalidServerResponse">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.ClockOutOfSync">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.WaitForTimeout">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.GraphqlError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.NetworkModuleSuspended">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.WebsocketDisconnected">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.NotSupported">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.NoEndpointsProvided">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.GraphqlWebsocketInitError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.NetErrorCode.NetworkModuleResumed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.NetworkConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.ServerAddress">
            <summary>
            DApp Server public address. For instance, for `net.ton.dev/graphql` GraphQL endpoint the server address will be net.ton.dev
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.Endpoints">
            <summary>
            <para>List of DApp Server addresses.</para>
            <para>Any correct URL format can be specified, including IP addresses This parameter is prevailing over `server_address`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.NetworkRetriesCount">
            <summary>
            <para>Deprecated.</para>
            <para>You must use `network.max_reconnect_timeout` that allows to specify maximum network resolving timeout.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.MaxReconnectTimeout">
            <summary>
            <para>Maximum time for sequential reconnections.</para>
            <para>Must be specified in milliseconds. Default is 120000 (2 min).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.ReconnectTimeout">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.MessageRetriesCount">
            <summary>
            <para>The number of automatic message processing retries that SDK performs in case of `Message Expired (507)` error - but only for those messages which local emulation was successful or failed with replay protection error.</para>
            <para>Default is 5.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.MessageProcessingTimeout">
            <summary>
            <para>Timeout that is used to process message delivery for the contracts which ABI does not include "expire" header. If the message is not delivered within the specified timeout the appropriate error occurs.</para>
            <para>Must be specified in milliseconds. Default is 40000 (40 sec).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.WaitForTimeout">
            <summary>
            <para>Maximum timeout that is used for query response.</para>
            <para>Must be specified in milliseconds. Default is 40000 (40 sec).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.OutOfSyncThreshold">
            <summary>
            <para>Maximum time difference between server and client.</para>
            <para>If client's device time is out of sync and difference is more than the threshold then error will occur. Also an error will occur if the specified threshold is more than</para>
            <para>`message_processing_timeout/2`.</para>
            <para>Must be specified in milliseconds. Default is 15000 (15 sec).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.SendingEndpointCount">
            <summary>
            <para>Maximum number of randomly chosen endpoints the library uses to broadcast a message.</para>
            <para>Default is 2.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.LatencyDetectionInterval">
            <summary>
            <para>Frequency of sync latency detection.</para>
            <para>Library periodically checks the current endpoint for blockchain data syncronization latency.</para>
            <para>If the latency (time-lag) is less then `NetworkConfig.max_latency`</para>
            <para>then library selects another endpoint.</para>
            <para>Must be specified in milliseconds. Default is 60000 (1 min).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.MaxLatency">
            <summary>
            <para>Maximum value for the endpoint's blockchain data syncronization latency (time-lag). Library periodically checks the current endpoint for blockchain data synchronization latency. If the latency (time-lag) is less then `NetworkConfig.max_latency` then library selects another endpoint.</para>
            <para>Must be specified in milliseconds. Default is 60000 (1 min).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.QueryTimeout">
            <summary>
            <para>Default timeout for http requests.</para>
            <para>Is is used when no timeout specified for the request to limit the answer waiting time. If no answer received during the timeout requests ends with</para>
            <para>error.</para>
            <para>Must be specified in milliseconds. Default is 60000 (1 min).</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.NetworkConfig.AccessKey">
            <summary>
            <para>Access key to GraphQL API.</para>
            <para>At the moment is not used in production.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.OrderBy">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.OrderBy.Path">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.OrderBy.Direction">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc.params">
            <summary>
            Parameters to encode into BOC
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc.Data">
            <summary>
            Parameters and values as a JSON structure
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc.BocCache">
            <summary>
            <para>Cache type to put the result.</para>
            <para>The BOC itself returned if no cache type provided</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAggregateCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAggregateCollection.Collection">
            <summary>
            Collection name (accounts, blocks, transactions, messages, block_signatures)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAggregateCollection.Filter">
            <summary>
            Collection filter
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAggregateCollection.Fields">
            <summary>
            Projection (result) string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Debot Browser callbacks</para>
            <para>Called by debot engine to communicate with debot browser.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Log">
            <summary>
            Print message to user.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Log.Msg">
            <summary>
            Print message to user.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Switch">
            <summary>
            Switch debot to another context (menu).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Switch.ContextId">
            <summary>
            Switch debot to another context (menu).
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.SwitchCompleted">
            <summary>
            Notify browser that all context actions are shown.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.ShowAction">
            <summary>
            Show action to the user. Called after `switch` for each action in context.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.ShowAction.Action">
            <summary>
            Show action to the user. Called after `switch` for each action in context.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Input">
            <summary>
            Request user input.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Input.Prompt">
            <summary>
            Request user input.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.GetSigningBox">
            <summary>
            <para>Get signing box to sign data.</para>
            <para>Signing box returned is owned and disposed by debot engine</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.InvokeDebot">
            <summary>
            Execute action of another debot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.InvokeDebot.DebotAddr">
            <summary>
            Execute action of another debot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.InvokeDebot.Action">
            <summary>
            Execute action of another debot.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Send">
            <summary>
            Used by Debot to call DInterface implemented by Debot Browser.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Send.Message">
            <summary>
            Used by Debot to call DInterface implemented by Debot Browser.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Approve">
            <summary>
            Requests permission from DeBot Browser to execute DeBot operation.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppDebotBrowser.Approve.Activity">
            <summary>
            Requests permission from DeBot Browser to execute DeBot operation.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox">
            <summary>
            Encryption box callbacks.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox.GetInfo">
            <summary>
            Get encryption box info
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox.Encrypt">
            <summary>
            Encrypt data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox.Encrypt.Data">
            <summary>
            Encrypt data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox.Decrypt">
            <summary>
            Decrypt data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppEncryptionBox.Decrypt.Data">
            <summary>
            Decrypt data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppRequest">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppRequest.AppRequestId">
            <summary>
            <para>Request ID.</para>
            <para>Should be used in `resolve_app_request` call</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppRequest.RequestData">
            <summary>
            Request describing data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppSigningBox">
            <summary>
            Signing box callbacks.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppSigningBox.GetPublicKey">
            <summary>
            Get signing box public key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAppSigningBox.Sign">
            <summary>
            Sign data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAppSigningBox.Sign.Unsigned">
            <summary>
            Sign data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAttachSignature">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignature.Abi">
            <summary>
            Contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignature.PublicKey">
            <summary>
            Public key encoded in `hex`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignature.Message">
            <summary>
            Unsigned message BOC encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignature.Signature">
            <summary>
            Signature encoded in `hex`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody.Abi">
            <summary>
            Contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody.PublicKey">
            <summary>
            <para>Public key.</para>
            <para>Must be encoded with `hex`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody.Message">
            <summary>
            <para>Unsigned message body BOC.</para>
            <para>Must be encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody.Signature">
            <summary>
            <para>Signature.</para>
            <para>Must be encoded with `hex`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfBatchQuery">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBatchQuery.Operations">
            <summary>
            List of query operations that must be performed per single fetch.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfBocCacheGet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBocCacheGet.BocRef">
            <summary>
            Reference to the cached BOC
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfBocCacheSet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBocCacheSet.Boc">
            <summary>
            BOC encoded as base64 or BOC reference
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBocCacheSet.CacheType">
            <summary>
            Cache type
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfBocCacheUnpin">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBocCacheUnpin.Pin">
            <summary>
            Pinned name
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfBocCacheUnpin.BocRef">
            <summary>
            <para>Reference to the cached BOC.</para>
            <para>If it is provided then only referenced BOC is unpinned</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfCalcStorageFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCalcStorageFee.Account">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCalcStorageFee.Period">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfChaCha20">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfChaCha20.Data">
            <summary>
            <para>Source data to be encrypted or decrypted.</para>
            <para>Must be encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfChaCha20.Key">
            <summary>
            <para>256-bit key.</para>
            <para>Must be encoded with `hex`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfChaCha20.Nonce">
            <summary>
            <para>96-bit nonce.</para>
            <para>Must be encoded with `hex`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfCompressZstd">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCompressZstd.Uncompressed">
            <summary>
            <para>Uncompressed data.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCompressZstd.Level">
            <summary>
            Compression level, from 1 to 21. Where: 1 - lowest compression level (fastest compression); 21 - highest compression level (slowest compression). If level is omitted, the default compression level is used (currently `3`).
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfConvertAddress">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfConvertAddress.Address">
            <summary>
            Account address in any TON format.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfConvertAddress.OutputFormat">
            <summary>
            Specify the format to convert to.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfConvertPublicKeyToTonSafeFormat">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfConvertPublicKeyToTonSafeFormat.PublicKey">
            <summary>
            Public key - 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfCreateBlockIterator">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateBlockIterator.StartTime">
            <summary>
            <para>Starting time to iterate from.</para>
            <para>If the application specifies this parameter then the iteration</para>
            <para>includes blocks with `gen_utime` &gt;= `start_time`.</para>
            <para>Otherwise the iteration starts from zero state.</para>
            <para>Must be specified in seconds.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateBlockIterator.EndTime">
            <summary>
            <para>Optional end time to iterate for.</para>
            <para>If the application specifies this parameter then the iteration</para>
            <para>includes blocks with `gen_utime` &lt; `end_time`.</para>
            <para>Otherwise the iteration never stops.</para>
            <para>Must be specified in seconds.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateBlockIterator.ShardFilter">
            <summary>
            <para>Shard prefix filter.</para>
            <para>If the application specifies this parameter and it is not the empty array</para>
            <para>then the iteration will include items related to accounts that belongs to</para>
            <para>the specified shard prefixes.</para>
            <para>Shard prefix must be represented as a string "workchain:prefix".</para>
            <para>Where `workchain` is a signed integer and the `prefix` if a hexadecimal</para>
            <para>representation if the 64-bit unsigned integer with tagged shard prefix.</para>
            <para>For example: "0:3800000000000000".</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateBlockIterator.Result">
            <summary>
            <para>Projection (result) string.</para>
            <para>List of the fields that must be returned for iterated items.</para>
            <para>This field is the same as the `result` parameter of</para>
            <para>the `query_collection` function.</para>
            <para>Note that iterated items can contains additional fields that are</para>
            <para>not requested in the `result`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfCreateEncryptionBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateEncryptionBox.Algorithm">
            <summary>
            Encryption algorithm specifier including cipher parameters (key, IV, etc)
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.StartTime">
            <summary>
            <para>Starting time to iterate from.</para>
            <para>If the application specifies this parameter then the iteration</para>
            <para>includes blocks with `gen_utime` &gt;= `start_time`.</para>
            <para>Otherwise the iteration starts from zero state.</para>
            <para>Must be specified in seconds.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.EndTime">
            <summary>
            <para>Optional end time to iterate for.</para>
            <para>If the application specifies this parameter then the iteration</para>
            <para>includes blocks with `gen_utime` &lt; `end_time`.</para>
            <para>Otherwise the iteration never stops.</para>
            <para>Must be specified in seconds.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.ShardFilter">
            <summary>
            <para>Shard prefix filters.</para>
            <para>If the application specifies this parameter and it is not an empty array</para>
            <para>then the iteration will include items related to accounts that belongs to</para>
            <para>the specified shard prefixes.</para>
            <para>Shard prefix must be represented as a string "workchain:prefix".</para>
            <para>Where `workchain` is a signed integer and the `prefix` if a hexadecimal</para>
            <para>representation if the 64-bit unsigned integer with tagged shard prefix.</para>
            <para>For example: "0:3800000000000000".</para>
            <para>Account address conforms to the shard filter if</para>
            <para>it belongs to the filter workchain and the first bits of address match to</para>
            <para>the shard prefix. Only transactions with suitable account addresses are iterated.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.AccountsFilter">
            <summary>
            <para>Account address filter.</para>
            <para>Application can specify the list of accounts for which</para>
            <para>it wants to iterate transactions.</para>
            <para>If this parameter is missing or an empty list then the library iterates</para>
            <para>transactions for all accounts that pass the shard filter.</para>
            <para>Note that the library doesn't detect conflicts between the account filter and the shard filter</para>
            <para>if both are specified.</para>
            <para>So it is an application responsibility to specify the correct filter combination.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.Result">
            <summary>
            <para>Projection (result) string.</para>
            <para>List of the fields that must be returned for iterated items.</para>
            <para>This field is the same as the `result` parameter of</para>
            <para>the `query_collection` function.</para>
            <para>Note that iterated items can contain additional fields that are</para>
            <para>not requested in the `result`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator.IncludeTransfers">
            <summary>
            <para>Include `transfers` field in iterated transactions.</para>
            <para>If this parameter is `true` then each transaction contains field</para>
            <para>`transfers` with list of transfer. See more about this structure in function description.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeAccountData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeAccountData.Abi">
            <summary>
            Contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeAccountData.Data">
            <summary>
            Data BOC or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeBoc.params">
            <summary>
            Parameters to decode from BOC
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeBoc.Boc">
            <summary>
            Data BOC or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeBoc.AllowPartial">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeInitialData.Abi">
            <summary>
            <para>Contract ABI.</para>
            <para>Initial data is decoded if this parameter is provided</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeInitialData.Data">
            <summary>
            Data BOC or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeMessage.Abi">
            <summary>
            contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeMessage.Message">
            <summary>
            Message BOC
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeMessageBody.Abi">
            <summary>
            Contract ABI used to decode.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeMessageBody.Body">
            <summary>
            Message body BOC encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeMessageBody.IsInternal">
            <summary>
            True if the body belongs to the internal message.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecodeTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeTvc.Tvc">
            <summary>
            Contract TVC image BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecodeTvc.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfDecompressZstd">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfDecompressZstd.Compressed">
            <summary>
            <para>Compressed data.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeAccount">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeAccount.StateInit">
            <summary>
            Source of the account state init.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeAccount.Balance">
            <summary>
            Initial balance.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeAccount.LastTransLt">
            <summary>
            Initial value for the `last_trans_lt`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeAccount.LastPaid">
            <summary>
            Initial value for the `last_paid`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeAccount.BocCache">
            <summary>
            <para>Cache type to put the result.</para>
            <para>The BOC itself returned if no cache type provided</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeBoc.Builder">
            <summary>
            Cell builder operations.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeBoc.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage.Src">
            <summary>
            Source address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage.Dst">
            <summary>
            Destination address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage.Init">
            <summary>
            Bag of cells with state init (used in deploy messages).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage.Body">
            <summary>
            Bag of cells with the message body encoded as base64.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage.BocCache">
            <summary>
            <para>Cache type to put the result.</para>
            <para>The BOC itself returned if no cache type provided</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInitialData.Abi">
            <summary>
            Contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInitialData.InitialData">
            <summary>
            <para>List of initial values for contract's static variables.</para>
            <para>`abi` parameter should be provided to set initial data</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInitialData.InitialPubkey">
            <summary>
            Initial account owner's public key to set into account data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInitialData.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.Abi">
            <summary>
            <para>Contract ABI.</para>
            <para>Can be None if both deploy_set and call_set are None.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.Address">
            <summary>
            <para>Target address the message will be sent to.</para>
            <para>Must be specified in case of non-deploy message.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.SrcAddress">
            <summary>
            Source address of the message.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.DeploySet">
            <summary>
            <para>Deploy parameters.</para>
            <para>Must be specified in case of deploy message.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.CallSet">
            <summary>
            <para>Function call parameters.</para>
            <para>Must be specified in case of non-deploy message.</para>
            <para>In case of deploy message it is optional and contains parameters</para>
            <para>of the functions that will to be called upon deploy transaction.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.Value">
            <summary>
            Value in nanotokens to be sent with message.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.Bounce">
            <summary>
            <para>Flag of bounceable message.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage.EnableIhr">
            <summary>
            <para>Enable Instant Hypercube Routing for the message.</para>
            <para>Default is false.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.Abi">
            <summary>
            Contract ABI.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.Address">
            <summary>
            <para>Target address the message will be sent to.</para>
            <para>Must be specified in case of non-deploy message.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.DeploySet">
            <summary>
            <para>Deploy parameters.</para>
            <para>Must be specified in case of deploy message.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.CallSet">
            <summary>
            <para>Function call parameters.</para>
            <para>Must be specified in case of non-deploy message.</para>
            <para>In case of deploy message it is optional and contains parameters</para>
            <para>of the functions that will to be called upon deploy transaction.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.Signer">
            <summary>
            Signing parameters.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessage.ProcessingTryIndex">
            <summary>
            <para>Processing try index.</para>
            <para>Used in message processing with retries (if contract's ABI includes "expire" header).</para>
            <para>Encoder uses the provided try index to calculate message</para>
            <para>expiration time. The 1st message expiration time is specified in</para>
            <para>Client config.</para>
            <para>Expiration timeouts will grow with every retry.</para>
            <para>Retry grow factor is set in Client config:</para>
            <para>&lt;.....add config parameter with default value here&gt;</para>
            <para>Default value is 0.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody.Abi">
            <summary>
            Contract ABI.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody.CallSet">
            <summary>
            <para>Function call parameters.</para>
            <para>Must be specified in non deploy message.</para>
            <para>In case of deploy message contains parameters of constructor.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody.IsInternal">
            <summary>
            True if internal message body must be encoded.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody.Signer">
            <summary>
            Signing parameters.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeMessageBody.ProcessingTryIndex">
            <summary>
            <para>Processing try index.</para>
            <para>Used in message processing with retries.</para>
            <para>Encoder uses the provided try index to calculate message</para>
            <para>expiration time.</para>
            <para>Expiration timeouts will grow with every retry.</para>
            <para>Default value is 0.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncodeTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.Code">
            <summary>
            Contract code BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.Data">
            <summary>
            Contract data BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.Library">
            <summary>
            Contract library BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.Tick">
            <summary>
            <para>`special.tick` field.</para>
            <para>Specifies the contract ability to handle tick transactions</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.Tock">
            <summary>
            <para>`special.tock` field.</para>
            <para>Specifies the contract ability to handle tock transactions</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.SplitDepth">
            <summary>
            Is present and non-zero only in instances of large smart contracts
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncodeTvc.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncryptionBoxDecrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncryptionBoxDecrypt.EncryptionBox">
            <summary>
            Encryption box handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncryptionBoxDecrypt.Data">
            <summary>
            Data to be decrypted, encoded in Base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncryptionBoxEncrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncryptionBoxEncrypt.EncryptionBox">
            <summary>
            Encryption box handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncryptionBoxEncrypt.Data">
            <summary>
            Data to be encrypted, encoded in Base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfEncryptionBoxGetInfo">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfEncryptionBoxGetInfo.EncryptionBox">
            <summary>
            Encryption box handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfExecute">
            <summary>
            [UNSTABLE](UNSTABLE.md) Parameters for executing debot action.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfExecute.DebotHandle">
            <summary>
            Debot handle which references an instance of debot engine.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfExecute.Action">
            <summary>
            Debot Action that must be executed.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfFactorize">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfFactorize.Composite">
            <summary>
            Hexadecimal representation of u64 composite number.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfFetch">
            <summary>
            [UNSTABLE](UNSTABLE.md) Parameters to fetch DeBot metadata.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfFetch.Address">
            <summary>
            Debot smart contract address.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfFindLastShardBlock">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfFindLastShardBlock.Address">
            <summary>
            Account address
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGenerateRandomBytes">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGenerateRandomBytes.Length">
            <summary>
            Size of random byte array.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetAddressType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetAddressType.Address">
            <summary>
            Account address in any TON format.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetBlockchainConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetBlockchainConfig.BlockBoc">
            <summary>
            Key block BOC or zerostate BOC encoded as base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetBocDepth">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetBocDepth.Boc">
            <summary>
            BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetBocHash">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetBocHash.Boc">
            <summary>
            BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetCodeFromTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetCodeFromTvc.Tvc">
            <summary>
            Contract TVC image or image BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetCodeSalt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetCodeSalt.Code">
            <summary>
            Contract code BOC encoded as base64 or code BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetCodeSalt.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfGetCompilerVersion">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfGetCompilerVersion.Code">
            <summary>
            Contract code BOC encoded as base64 or code BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHash">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHash.Data">
            <summary>
            <para>Input data for hash calculation.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv.Xprv">
            <summary>
            Serialized extended private key
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv.ChildIndex">
            <summary>
            Child index (see BIP-0032)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv.Hardened">
            <summary>
            Indicates the derivation of hardened/not-hardened key (see BIP-0032)
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrvPath">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrvPath.Xprv">
            <summary>
            Serialized extended private key
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrvPath.Path">
            <summary>
            Derivation path, for instance "m/44'/396'/0'/0/0"
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHDKeyPublicFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyPublicFromXPrv.Xprv">
            <summary>
            Serialized extended private key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHDKeySecretFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeySecretFromXPrv.Xprv">
            <summary>
            Serialized extended private key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic.Phrase">
            <summary>
            String with seed phrase
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic.WordCount">
            <summary>
            Mnemonic word count
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfInit">
            <summary>
            [UNSTABLE](UNSTABLE.md) Parameters to init DeBot.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfInit.Address">
            <summary>
            Debot smart contract address
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfIteratorNext">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfIteratorNext.Iterator">
            <summary>
            Iterator handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfIteratorNext.Limit">
            <summary>
            <para>Maximum count of the returned items.</para>
            <para>If value is missing or is less than 1 the library uses 1.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfIteratorNext.ReturnResumeState">
            <summary>
            Indicates that function must return the iterator state that can be used for resuming iteration.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys.Phrase">
            <summary>
            Phrase
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys.Path">
            <summary>
            Derivation path, for instance "m/44'/396'/0'/0/0"
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys.WordCount">
            <summary>
            Word count
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy.Entropy">
            <summary>
            <para>Entropy bytes.</para>
            <para>Hex encoded.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy.WordCount">
            <summary>
            Mnemonic word count
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfMnemonicFromRandom">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicFromRandom.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicFromRandom.WordCount">
            <summary>
            Mnemonic word count
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfMnemonicVerify">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicVerify.Phrase">
            <summary>
            Phrase
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicVerify.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicVerify.WordCount">
            <summary>
            Word count
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfMnemonicWords">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfMnemonicWords.Dictionary">
            <summary>
            Dictionary identifier
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfModularPower">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfModularPower.Base">
            <summary>
            `base` argument of calculation.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfModularPower.Exponent">
            <summary>
            `exponent` argument of calculation.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfModularPower.Modulus">
            <summary>
            `modulus` argument of calculation.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBox.Decrypted">
            <summary>
            Data that must be encrypted encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBox.Nonce">
            <summary>
            Nonce, encoded in `hex`
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBox.TheirPublic">
            <summary>
            Receiver's public key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBox.Secret">
            <summary>
            Sender's private key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclBoxKeyPairFromSecret">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBoxKeyPairFromSecret.Secret">
            <summary>
            Secret key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclBoxOpen">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBoxOpen.Encrypted">
            <summary>
            <para>Data that must be decrypted.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBoxOpen.Nonce">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBoxOpen.TheirPublic">
            <summary>
            Sender's public key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclBoxOpen.Secret">
            <summary>
            Receiver's private key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSecretBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBox.Decrypted">
            <summary>
            <para>Data that must be encrypted.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBox.Nonce">
            <summary>
            Nonce in `hex`
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBox.Key">
            <summary>
            Secret key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen.Encrypted">
            <summary>
            <para>Data that must be decrypted.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen.Nonce">
            <summary>
            Nonce in `hex`
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen.Key">
            <summary>
            Public key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSign.Unsigned">
            <summary>
            Data that must be signed encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSign.Secret">
            <summary>
            Signer's secret key - unprefixed 0-padded to 128 symbols hex string (concatenation of 64 symbols secret and 64 symbols public keys). See `nacl_sign_keypair_from_secret_key`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify.Unsigned">
            <summary>
            <para>Unsigned data that must be verified.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify.Signature">
            <summary>
            <para>Signature that must be verified.</para>
            <para>Encoded with `hex`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify.Public">
            <summary>
            Signer's public key - unprefixed 0-padded to 64 symbols hex string.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSignKeyPairFromSecret">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignKeyPairFromSecret.Secret">
            <summary>
            Secret key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfNaclSignOpen">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignOpen.Signed">
            <summary>
            <para>Signed data that must be unsigned.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfNaclSignOpen.Public">
            <summary>
            Signer's public key - unprefixed 0-padded to 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfParse">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfParse.Boc">
            <summary>
            BOC encoded as base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfParseShardstate">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfParseShardstate.Boc">
            <summary>
            BOC encoded as base64
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfParseShardstate.Id">
            <summary>
            Shardstate identificator
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfParseShardstate.WorkchainId">
            <summary>
            Workchain shardstate belongs to
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfProcessMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfProcessMessage.MessageEncodeParams">
            <summary>
            Message encode parameters.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfProcessMessage.SendEvents">
            <summary>
            Flag for requesting events sending
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfProofBlockData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfProofBlockData.Block">
            <summary>
            Single block's data, retrieved from TONOS API, that needs proof. Required fields are `id` and/or top-level `boc` (for block identification), others are optional.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfProofMessageData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfProofMessageData.Message">
            <summary>
            Single message's data as queried from DApp server, without modifications. The required fields are `id` and/or top-level `boc`, others are optional. In order to reduce network requests count, it is recommended to provide at least `boc` of message and non-null `src_transaction.id` or `dst_transaction.id`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfProofTransactionData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfProofTransactionData.Transaction">
            <summary>
            Single transaction's data as queried from DApp server, without modifications. The required fields are `id` and/or top-level `boc`, others are optional. In order to reduce network requests count, it is recommended to provide `block_id` and `boc` of transaction.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfQuery">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQuery.Query">
            <summary>
            GraphQL query text.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQuery.Variables">
            <summary>
            <para>Variables used in query.</para>
            <para>Must be a map with named values that can be used in query.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfQueryCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCollection.Collection">
            <summary>
            Collection name (accounts, blocks, transactions, messages, block_signatures)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCollection.Filter">
            <summary>
            Collection filter
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCollection.Result">
            <summary>
            Projection (result) string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCollection.Order">
            <summary>
            Sorting order
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCollection.Limit">
            <summary>
            Number of documents to return
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfQueryCounterparties">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCounterparties.Account">
            <summary>
            Account address
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCounterparties.Result">
            <summary>
            Projection (result) string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCounterparties.First">
            <summary>
            Number of counterparties to return
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryCounterparties.After">
            <summary>
            `cursor` field of the last received result
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfQueryOperation">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryOperation.QueryCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryOperation.WaitForCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryOperation.AggregateCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryOperation.QueryCounterparties">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfQueryTransactionTree">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryTransactionTree.InMsg">
            <summary>
            Input message id.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryTransactionTree.AbiRegistry">
            <summary>
            List of contract ABIs that will be used to decode message bodies. Library will try to decode each returned message body using any ABI from the registry.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfQueryTransactionTree.Timeout">
            <summary>
            <para>Timeout used to limit waiting time for the missing messages and transaction.</para>
            <para>If some of the following messages and transactions are missing yet</para>
            <para>The maximum waiting time is regulated by this option.</para>
            <para>Default value is 60000 (1 min).</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfRemove">
            <summary>
            [UNSTABLE](UNSTABLE.md)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRemove.DebotHandle">
            <summary>
            Debot handle which references an instance of debot engine.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfResolveAppRequest">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfResolveAppRequest.AppRequestId">
            <summary>
            Request ID received from SDK
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfResolveAppRequest.Result">
            <summary>
            Result of request processing
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfResumeBlockIterator">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfResumeBlockIterator.ResumeState">
            <summary>
            <para>Iterator state from which to resume.</para>
            <para>Same as value returned from `iterator_next`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfResumeTransactionIterator">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfResumeTransactionIterator.ResumeState">
            <summary>
            <para>Iterator state from which to resume.</para>
            <para>Same as value returned from `iterator_next`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfResumeTransactionIterator.AccountsFilter">
            <summary>
            <para>Account address filter.</para>
            <para>Application can specify the list of accounts for which</para>
            <para>it wants to iterate transactions.</para>
            <para>If this parameter is missing or an empty list then the library iterates</para>
            <para>transactions for all accounts that passes the shard filter.</para>
            <para>Note that the library doesn't detect conflicts between the account filter and the shard filter</para>
            <para>if both are specified.</para>
            <para>So it is the application's responsibility to specify the correct filter combination.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfRunExecutor">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.Message">
            <summary>
            <para>Input message BOC.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.Account">
            <summary>
            Account to run on executor
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.ExecutionOptions">
            <summary>
            Execution options.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.Abi">
            <summary>
            Contract ABI for decoding output messages
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.SkipTransactionCheck">
            <summary>
            Skip transaction check flag
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.BocCache">
            <summary>
            <para>Cache type to put the result.</para>
            <para>The BOC itself returned if no cache type provided</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunExecutor.ReturnUpdatedAccount">
            <summary>
            <para>Return updated account flag.</para>
            <para>Empty string is returned if the flag is `false`</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfRunGet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunGet.Account">
            <summary>
            Account BOC in `base64`
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunGet.FunctionName">
            <summary>
            Function name
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunGet.Input">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunGet.ExecutionOptions">
            <summary>
            Execution options
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunGet.TupleListAsArray">
            <summary>
            <para>Convert lists based on nested tuples in the **result** into plain arrays.</para>
            <para>Default is `false`. Input parameters may use any of lists representations</para>
            <para>If you receive this error on Web: "Runtime error. Unreachable code should not be executed...",</para>
            <para>set this flag to true.</para>
            <para>This may happen, for example, when elector contract contains too many participants</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfRunTvm">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.Message">
            <summary>
            <para>Input message BOC.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.Account">
            <summary>
            <para>Account BOC.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.ExecutionOptions">
            <summary>
            Execution options.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.Abi">
            <summary>
            Contract ABI for decoding output messages
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.BocCache">
            <summary>
            <para>Cache type to put the result.</para>
            <para>The BOC itself returned if no cache type provided</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfRunTvm.ReturnUpdatedAccount">
            <summary>
            <para>Return updated account flag.</para>
            <para>Empty string is returned if the flag is `false`</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfScrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.Password">
            <summary>
            The password bytes to be hashed. Must be encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.Salt">
            <summary>
            Salt bytes that modify the hash to protect against Rainbow table attacks. Must be encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.LogN">
            <summary>
            CPU/memory cost parameter
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.R">
            <summary>
            The block size parameter, which fine-tunes sequential memory read size and performance.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.P">
            <summary>
            Parallelization parameter.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfScrypt.DkLen">
            <summary>
            Intended output length in octets of the derived key.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSend">
            <summary>
            [UNSTABLE](UNSTABLE.md) Parameters of `send` function.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSend.DebotHandle">
            <summary>
            Debot handle which references an instance of debot engine.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSend.Message">
            <summary>
            BOC of internal message to debot encoded in base64 format.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSendMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSendMessage.Message">
            <summary>
            Message BOC.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSendMessage.Abi">
            <summary>
            <para>Optional message ABI.</para>
            <para>If this parameter is specified and the message has the</para>
            <para>`expire` header then expiration time will be checked against</para>
            <para>the current time to prevent unnecessary sending of already expired message.</para>
            <para>The `message already expired` error will be returned in this</para>
            <para>case.</para>
            <para>Note, that specifying `abi` for ABI compliant contracts is</para>
            <para>strongly recommended, so that proper processing strategy can be</para>
            <para>chosen.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSendMessage.SendEvents">
            <summary>
            Flag for requesting events sending
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSetCodeSalt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSetCodeSalt.Code">
            <summary>
            Contract code BOC encoded as base64 or code BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSetCodeSalt.Salt">
            <summary>
            <para>Code salt to set.</para>
            <para>BOC encoded as base64 or BOC handle</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSetCodeSalt.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSign.Unsigned">
            <summary>
            Data that must be signed encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSign.Keys">
            <summary>
            Sign keys.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSigningBoxSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSigningBoxSign.SigningBox">
            <summary>
            Signing Box handle.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSigningBoxSign.Unsigned">
            <summary>
            <para>Unsigned user data.</para>
            <para>Must be encoded with `base64`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfStart">
            <summary>
            [UNSTABLE](UNSTABLE.md) Parameters to start DeBot. DeBot must be already initialized with init() function.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfStart.DebotHandle">
            <summary>
            Debot handle which references an instance of debot engine.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSubscribe">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSubscribe.Subscription">
            <summary>
            GraphQL subscription text.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSubscribe.Variables">
            <summary>
            <para>Variables used in subscription.</para>
            <para>Must be a map with named values that can be used in query.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfSubscribeCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSubscribeCollection.Collection">
            <summary>
            Collection name (accounts, blocks, transactions, messages, block_signatures)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSubscribeCollection.Filter">
            <summary>
            Collection filter
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfSubscribeCollection.Result">
            <summary>
            Projection (result) string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfTonCrc16">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfTonCrc16.Data">
            <summary>
            <para>Input data for CRC calculation.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfUpdateInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfUpdateInitialData.Abi">
            <summary>
            Contract ABI
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfUpdateInitialData.Data">
            <summary>
            Data BOC or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfUpdateInitialData.InitialData">
            <summary>
            <para>List of initial values for contract's static variables.</para>
            <para>`abi` parameter should be provided to set initial data</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfUpdateInitialData.InitialPubkey">
            <summary>
            Initial account owner's public key to set into account data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfUpdateInitialData.BocCache">
            <summary>
            Cache type to put the result. The BOC itself returned if no cache type provided.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfVerifySignature">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfVerifySignature.Signed">
            <summary>
            Signed data that must be verified encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfVerifySignature.Public">
            <summary>
            Signer's public key - 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfWaitForCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForCollection.Collection">
            <summary>
            Collection name (accounts, blocks, transactions, messages, block_signatures)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForCollection.Filter">
            <summary>
            Collection filter
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForCollection.Result">
            <summary>
            Projection (result) string
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForCollection.Timeout">
            <summary>
            Query timeout
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ParamsOfWaitForTransaction">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForTransaction.Abi">
            <summary>
            <para>Optional ABI for decoding the transaction result.</para>
            <para>If it is specified, then the output messages' bodies will be</para>
            <para>decoded according to this ABI.</para>
            <para>The `abi_decoded` result field will be filled out.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForTransaction.Message">
            <summary>
            <para>Message BOC.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForTransaction.ShardBlockId">
            <summary>
            <para>The last generated block id of the destination account shard before the message was sent.</para>
            <para>You must provide the same value as the `send_message` has returned.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForTransaction.SendEvents">
            <summary>
            Flag that enables/disables intermediate events
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ParamsOfWaitForTransaction.SendingEndpoints">
            <summary>
            <para>The list of endpoints to which the message was sent.</para>
            <para>Use this field to get more informative errors.</para>
            <para>Provide the same value as the `send_message` has returned.</para>
            <para>If the message was not delivered (expired), SDK will log the endpoint URLs, used for its sending.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.MessageAlreadyExpired">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.MessageHasNotDestinationAddress">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.CanNotBuildMessageCell">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.FetchBlockFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.SendMessageFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.InvalidMessageBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.MessageExpired">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.TransactionWaitTimeout">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.InvalidBlockReceived">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.CanNotCheckBlockShard">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.BlockNotFound">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.InvalidData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProcessingErrorCode.ExternalSignerMustNotBeUsed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.WillFetchFirstBlock">
            <summary>
            <para>Notifies the application that the account's current shard block will be fetched from the network. This step is performed before the message sending so that sdk knows starting from which block it will search for the transaction.</para>
            <para>Fetched block will be used later in waiting phase.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.FetchFirstBlockFailed">
            <summary>
            <para>Notifies the app that the client has failed to fetch the account's current shard block.</para>
            <para>This may happen due to the network issues. Receiving this event means that message processing will not proceed -</para>
            <para>message was not sent, and Developer can try to run `process_message` again,</para>
            <para>in the hope that the connection is restored.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.FetchFirstBlockFailed.Error">
            <summary>
            <para>Notifies the app that the client has failed to fetch the account's current shard block.</para>
            <para>This may happen due to the network issues. Receiving this event means that message processing will not proceed -</para>
            <para>message was not sent, and Developer can try to run `process_message` again,</para>
            <para>in the hope that the connection is restored.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.WillSend">
            <summary>
            Notifies the app that the message will be sent to the network. This event means that the account's current shard block was successfully fetched and the message was successfully created (`abi.encode_message` function was executed successfully).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillSend.ShardBlockId">
            <summary>
            Notifies the app that the message will be sent to the network. This event means that the account's current shard block was successfully fetched and the message was successfully created (`abi.encode_message` function was executed successfully).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillSend.MessageId">
            <summary>
            Notifies the app that the message will be sent to the network. This event means that the account's current shard block was successfully fetched and the message was successfully created (`abi.encode_message` function was executed successfully).
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillSend.Message">
            <summary>
            Notifies the app that the message will be sent to the network. This event means that the account's current shard block was successfully fetched and the message was successfully created (`abi.encode_message` function was executed successfully).
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.DidSend">
            <summary>
            <para>Notifies the app that the message was sent to the network, i.e `processing.send_message` was successfuly executed. Now, the message is in the blockchain. If Application exits at this phase, Developer needs to proceed with processing after the application is restored with `wait_for_transaction` function, passing shard_block_id and message from this event.</para>
            <para>Do not forget to specify abi of your contract as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.DidSend.ShardBlockId">
            <summary>
            <para>Notifies the app that the message was sent to the network, i.e `processing.send_message` was successfuly executed. Now, the message is in the blockchain. If Application exits at this phase, Developer needs to proceed with processing after the application is restored with `wait_for_transaction` function, passing shard_block_id and message from this event.</para>
            <para>Do not forget to specify abi of your contract as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.DidSend.MessageId">
            <summary>
            <para>Notifies the app that the message was sent to the network, i.e `processing.send_message` was successfuly executed. Now, the message is in the blockchain. If Application exits at this phase, Developer needs to proceed with processing after the application is restored with `wait_for_transaction` function, passing shard_block_id and message from this event.</para>
            <para>Do not forget to specify abi of your contract as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.DidSend.Message">
            <summary>
            <para>Notifies the app that the message was sent to the network, i.e `processing.send_message` was successfuly executed. Now, the message is in the blockchain. If Application exits at this phase, Developer needs to proceed with processing after the application is restored with `wait_for_transaction` function, passing shard_block_id and message from this event.</para>
            <para>Do not forget to specify abi of your contract as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.SendFailed">
            <summary>
            <para>Notifies the app that the sending operation was failed with network error.</para>
            <para>Nevertheless the processing will be continued at the waiting</para>
            <para>phase because the message possibly has been delivered to the</para>
            <para>node.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.SendFailed.ShardBlockId">
            <summary>
            <para>Notifies the app that the sending operation was failed with network error.</para>
            <para>Nevertheless the processing will be continued at the waiting</para>
            <para>phase because the message possibly has been delivered to the</para>
            <para>node.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.SendFailed.MessageId">
            <summary>
            <para>Notifies the app that the sending operation was failed with network error.</para>
            <para>Nevertheless the processing will be continued at the waiting</para>
            <para>phase because the message possibly has been delivered to the</para>
            <para>node.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.SendFailed.Message">
            <summary>
            <para>Notifies the app that the sending operation was failed with network error.</para>
            <para>Nevertheless the processing will be continued at the waiting</para>
            <para>phase because the message possibly has been delivered to the</para>
            <para>node.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.SendFailed.Error">
            <summary>
            <para>Notifies the app that the sending operation was failed with network error.</para>
            <para>Nevertheless the processing will be continued at the waiting</para>
            <para>phase because the message possibly has been delivered to the</para>
            <para>node.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.WillFetchNextBlock">
            <summary>
            <para>Notifies the app that the next shard block will be fetched from the network.</para>
            <para>Event can occurs more than one time due to block walking</para>
            <para>procedure.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillFetchNextBlock.ShardBlockId">
            <summary>
            <para>Notifies the app that the next shard block will be fetched from the network.</para>
            <para>Event can occurs more than one time due to block walking</para>
            <para>procedure.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillFetchNextBlock.MessageId">
            <summary>
            <para>Notifies the app that the next shard block will be fetched from the network.</para>
            <para>Event can occurs more than one time due to block walking</para>
            <para>procedure.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.WillFetchNextBlock.Message">
            <summary>
            <para>Notifies the app that the next shard block will be fetched from the network.</para>
            <para>Event can occurs more than one time due to block walking</para>
            <para>procedure.</para>
            <para>If Application exits at this phase, Developer needs to proceed with processing</para>
            <para>after the application is restored with `wait_for_transaction` function, passing</para>
            <para>shard_block_id and message from this event. Do not forget to specify abi of your contract</para>
            <para>as well, it is crucial for proccessing. See `processing.wait_for_transaction` documentation.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.FetchNextBlockFailed">
            <summary>
            <para>Notifies the app that the next block can't be fetched.</para>
            <para>If no block was fetched within `NetworkConfig.wait_for_timeout` then processing stops.</para>
            <para>This may happen when the shard stops, or there are other network issues.</para>
            <para>In this case Developer should resume message processing with `wait_for_transaction`, passing shard_block_id,</para>
            <para>message and contract abi to it. Note that passing ABI is crucial, because it will influence the processing strategy.</para>
            <para>Another way to tune this is to specify long timeout in `NetworkConfig.wait_for_timeout`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.FetchNextBlockFailed.ShardBlockId">
            <summary>
            <para>Notifies the app that the next block can't be fetched.</para>
            <para>If no block was fetched within `NetworkConfig.wait_for_timeout` then processing stops.</para>
            <para>This may happen when the shard stops, or there are other network issues.</para>
            <para>In this case Developer should resume message processing with `wait_for_transaction`, passing shard_block_id,</para>
            <para>message and contract abi to it. Note that passing ABI is crucial, because it will influence the processing strategy.</para>
            <para>Another way to tune this is to specify long timeout in `NetworkConfig.wait_for_timeout`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.FetchNextBlockFailed.MessageId">
            <summary>
            <para>Notifies the app that the next block can't be fetched.</para>
            <para>If no block was fetched within `NetworkConfig.wait_for_timeout` then processing stops.</para>
            <para>This may happen when the shard stops, or there are other network issues.</para>
            <para>In this case Developer should resume message processing with `wait_for_transaction`, passing shard_block_id,</para>
            <para>message and contract abi to it. Note that passing ABI is crucial, because it will influence the processing strategy.</para>
            <para>Another way to tune this is to specify long timeout in `NetworkConfig.wait_for_timeout`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.FetchNextBlockFailed.Message">
            <summary>
            <para>Notifies the app that the next block can't be fetched.</para>
            <para>If no block was fetched within `NetworkConfig.wait_for_timeout` then processing stops.</para>
            <para>This may happen when the shard stops, or there are other network issues.</para>
            <para>In this case Developer should resume message processing with `wait_for_transaction`, passing shard_block_id,</para>
            <para>message and contract abi to it. Note that passing ABI is crucial, because it will influence the processing strategy.</para>
            <para>Another way to tune this is to specify long timeout in `NetworkConfig.wait_for_timeout`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.FetchNextBlockFailed.Error">
            <summary>
            <para>Notifies the app that the next block can't be fetched.</para>
            <para>If no block was fetched within `NetworkConfig.wait_for_timeout` then processing stops.</para>
            <para>This may happen when the shard stops, or there are other network issues.</para>
            <para>In this case Developer should resume message processing with `wait_for_transaction`, passing shard_block_id,</para>
            <para>message and contract abi to it. Note that passing ABI is crucial, because it will influence the processing strategy.</para>
            <para>Another way to tune this is to specify long timeout in `NetworkConfig.wait_for_timeout`</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProcessingEvent.MessageExpired">
            <summary>
            <para>Notifies the app that the message was not executed within expire timeout on-chain and will never be because it is already expired. The expiration timeout can be configured with `AbiConfig` parameters.</para>
            <para>This event occurs only for the contracts which ABI includes "expire" header.</para>
            <para>If Application specifies `NetworkConfig.message_retries_count` &gt; 0, then `process_message`</para>
            <para>will perform retries: will create a new message and send it again and repeat it untill it reaches</para>
            <para>the maximum retries count or receives a successful result.  All the processing</para>
            <para>events will be repeated.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.MessageExpired.MessageId">
            <summary>
            <para>Notifies the app that the message was not executed within expire timeout on-chain and will never be because it is already expired. The expiration timeout can be configured with `AbiConfig` parameters.</para>
            <para>This event occurs only for the contracts which ABI includes "expire" header.</para>
            <para>If Application specifies `NetworkConfig.message_retries_count` &gt; 0, then `process_message`</para>
            <para>will perform retries: will create a new message and send it again and repeat it untill it reaches</para>
            <para>the maximum retries count or receives a successful result.  All the processing</para>
            <para>events will be repeated.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.MessageExpired.Message">
            <summary>
            <para>Notifies the app that the message was not executed within expire timeout on-chain and will never be because it is already expired. The expiration timeout can be configured with `AbiConfig` parameters.</para>
            <para>This event occurs only for the contracts which ABI includes "expire" header.</para>
            <para>If Application specifies `NetworkConfig.message_retries_count` &gt; 0, then `process_message`</para>
            <para>will perform retries: will create a new message and send it again and repeat it untill it reaches</para>
            <para>the maximum retries count or receives a successful result.  All the processing</para>
            <para>events will be repeated.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProcessingEvent.MessageExpired.Error">
            <summary>
            <para>Notifies the app that the message was not executed within expire timeout on-chain and will never be because it is already expired. The expiration timeout can be configured with `AbiConfig` parameters.</para>
            <para>This event occurs only for the contracts which ABI includes "expire" header.</para>
            <para>If Application specifies `NetworkConfig.message_retries_count` &gt; 0, then `process_message`</para>
            <para>will perform retries: will create a new message and send it again and repeat it untill it reaches</para>
            <para>the maximum retries count or receives a successful result.  All the processing</para>
            <para>events will be repeated.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProofsConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ProofsConfig.CacheInLocalStorage">
            <summary>
            <para>Cache proofs in the local storage.</para>
            <para>Default is `true`. If this value is set to `true`, downloaded proofs and master-chain BOCs are saved into the</para>
            <para>persistent local storage (e.g. file system for native environments or browser's IndexedDB</para>
            <para>for the web); otherwise all the data is cached only in memory in current client's context</para>
            <para>and will be lost after destruction of the client.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ProofsErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProofsErrorCode.InvalidData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProofsErrorCode.ProofCheckFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProofsErrorCode.InternalError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.ProofsErrorCode.DataDiffersFromProven">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.RegisteredDebot">
            <summary>
            [UNSTABLE](UNSTABLE.md) Structure for storing debot handle returned from `init` function.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredDebot.DebotHandle">
            <summary>
            Debot handle which references an instance of debot engine.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredDebot.DebotAbi">
            <summary>
            Debot abi as json string.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredDebot.Info">
            <summary>
            Debot metadata.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.RegisteredEncryptionBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredEncryptionBox.Handle">
            <summary>
            Handle of the encryption box
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.RegisteredIterator">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredIterator.Handle">
            <summary>
            <para>Iterator handle.</para>
            <para>Must be removed using `remove_iterator`</para>
            <para>when it is no more needed for the application.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.RegisteredSigningBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.RegisteredSigningBox.Handle">
            <summary>
            Handle of the signing box.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAbiEncodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAbiEncodeBoc.Boc">
            <summary>
            BOC encoded as base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAggregateCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAggregateCollection.Values">
            <summary>
            <para>Values for requested fields.</para>
            <para>Returns an array of strings. Each string refers to the corresponding `fields` item.</para>
            <para>Numeric value is returned as a decimal string representations.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppDebotBrowser">
            <summary>
            [UNSTABLE](UNSTABLE.md) Returning values from Debot Browser callbacks.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.Input">
            <summary>
            Result of user input.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.Input.Value">
            <summary>
            Result of user input.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.GetSigningBox">
            <summary>
            Result of getting signing box.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.GetSigningBox.SigningBox">
            <summary>
            Result of getting signing box.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.InvokeDebot">
            <summary>
            Result of debot invoking.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.Approve">
            <summary>
            Result of `approve` callback.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppDebotBrowser.Approve.Approved">
            <summary>
            Result of `approve` callback.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppEncryptionBox">
            <summary>
            Returning values from signing box callbacks.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.GetInfo">
            <summary>
            Result of getting encryption box info
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.GetInfo.Info">
            <summary>
            Result of getting encryption box info
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.Encrypt">
            <summary>
            Result of encrypting data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.Encrypt.Data">
            <summary>
            Result of encrypting data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.Decrypt">
            <summary>
            Result of decrypting data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppEncryptionBox.Decrypt.Data">
            <summary>
            Result of decrypting data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppSigningBox">
            <summary>
            Returning values from signing box callbacks.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppSigningBox.GetPublicKey">
            <summary>
            Result of getting public key
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppSigningBox.GetPublicKey.PublicKey">
            <summary>
            Result of getting public key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAppSigningBox.Sign">
            <summary>
            Result of signing data
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAppSigningBox.Sign.Signature">
            <summary>
            Result of signing data
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAttachSignature">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAttachSignature.Message">
            <summary>
            Signed message BOC
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAttachSignature.MessageId">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfAttachSignatureToMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfAttachSignatureToMessageBody.Body">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfBatchQuery">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfBatchQuery.Results">
            <summary>
            <para>Result values for batched queries.</para>
            <para>Returns an array of values. Each value corresponds to `queries` item.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfBocCacheGet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfBocCacheGet.Boc">
            <summary>
            BOC encoded as base64.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfBocCacheSet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfBocCacheSet.BocRef">
            <summary>
            Reference to the cached BOC
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfBuildInfo">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfBuildInfo.BuildNumber">
            <summary>
            Build number assigned to this build by the CI.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfBuildInfo.Dependencies">
            <summary>
            Fingerprint of the most important dependencies.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfCalcStorageFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfCalcStorageFee.Fee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfChaCha20">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfChaCha20.Data">
            <summary>
            <para>Encrypted/decrypted data.</para>
            <para>Encoded with `base64`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfCompressZstd">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfCompressZstd.Compressed">
            <summary>
            <para>Compressed data.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfConvertAddress">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfConvertAddress.Address">
            <summary>
            Address in the specified format
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfConvertPublicKeyToTonSafeFormat">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfConvertPublicKeyToTonSafeFormat.TonPublicKey">
            <summary>
            Public key represented in TON safe format.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfDecodeAccountData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeAccountData.Data">
            <summary>
            Decoded data as a JSON structure.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfDecodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeBoc.Data">
            <summary>
            Decoded data as a JSON structure.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfDecodeInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeInitialData.InitialData">
            <summary>
            <para>List of initial values of contract's public variables.</para>
            <para>Initial data is decoded if `abi` input parameter is provided</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeInitialData.InitialPubkey">
            <summary>
            Initial account owner's public key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfDecodeTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.Code">
            <summary>
            Contract code BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.CodeHash">
            <summary>
            Contract code hash
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.CodeDepth">
            <summary>
            Contract code depth
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.Data">
            <summary>
            Contract data BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.DataHash">
            <summary>
            Contract data hash
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.DataDepth">
            <summary>
            Contract data depth
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.Library">
            <summary>
            Contract library BOC encoded as base64 or BOC handle
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.Tick">
            <summary>
            <para>`special.tick` field.</para>
            <para>Specifies the contract ability to handle tick transactions</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.Tock">
            <summary>
            <para>`special.tock` field.</para>
            <para>Specifies the contract ability to handle tock transactions</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.SplitDepth">
            <summary>
            Is present and non-zero only in instances of large smart contracts
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecodeTvc.CompilerVersion">
            <summary>
            Compiler version, for example 'sol 0.49.0'
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfDecompressZstd">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfDecompressZstd.Decompressed">
            <summary>
            <para>Decompressed data.</para>
            <para>Must be encoded as base64.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeAccount">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeAccount.Account">
            <summary>
            Account BOC encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeAccount.Id">
            <summary>
            Account ID  encoded in `hex`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeBoc.Boc">
            <summary>
            Encoded cell BOC or BOC cache key.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeExternalInMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeExternalInMessage.Message">
            <summary>
            Message BOC encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeExternalInMessage.MessageId">
            <summary>
            Message id.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeInitialData.Data">
            <summary>
            Updated data BOC or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeInternalMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeInternalMessage.Message">
            <summary>
            Message BOC encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeInternalMessage.Address">
            <summary>
            Destination address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeInternalMessage.MessageId">
            <summary>
            Message id.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessage.Message">
            <summary>
            Message BOC encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessage.DataToSign">
            <summary>
            <para>Optional data to be signed encoded in `base64`.</para>
            <para>Returned in case of `Signer::External`. Can be used for external</para>
            <para>message signing. Is this case you need to use this data to create signature and</para>
            <para>then produce signed message using `abi.attach_signature`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessage.Address">
            <summary>
            Destination address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessage.MessageId">
            <summary>
            Message id.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeMessageBody">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessageBody.Body">
            <summary>
            Message body BOC encoded with `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeMessageBody.DataToSign">
            <summary>
            <para>Optional data to sign.</para>
            <para>Encoded with `base64`. </para>
            <para>Presents when `message` is unsigned. Can be used for external</para>
            <para>message signing. Is this case you need to sing this data and</para>
            <para>produce signed message using `abi.attach_signature`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncodeTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncodeTvc.Tvc">
            <summary>
            Contract TVC image BOC encoded as base64 or BOC handle of boc_cache parameter was specified
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncryptionBoxDecrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncryptionBoxDecrypt.Data">
            <summary>
            Decrypted data, encoded in Base64.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncryptionBoxEncrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncryptionBoxEncrypt.Data">
            <summary>
            <para>Encrypted data, encoded in Base64.</para>
            <para>Padded to cipher block size</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfEncryptionBoxGetInfo">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfEncryptionBoxGetInfo.Info">
            <summary>
            Encryption box information
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfFactorize">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfFactorize.Factors">
            <summary>
            Two factors of composite or empty if composite can't be factorized.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfFetch">
            <summary>
            [UNSTABLE](UNSTABLE.md)
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfFetch.Info">
            <summary>
            Debot metadata.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfFindLastShardBlock">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfFindLastShardBlock.BlockId">
            <summary>
            Account shard last block ID
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGenerateRandomBytes">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGenerateRandomBytes.Bytes">
            <summary>
            Generated bytes encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetAddressType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetAddressType.AddressType">
            <summary>
            Account address type.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetApiReference">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetApiReference.Api">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetBlockchainConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetBlockchainConfig.ConfigBoc">
            <summary>
            Blockchain config BOC encoded as base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetBocDepth">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetBocDepth.Depth">
            <summary>
            BOC root cell depth
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetBocHash">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetBocHash.Hash">
            <summary>
            BOC root hash encoded with hex
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetCodeFromTvc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetCodeFromTvc.Code">
            <summary>
            Contract code encoded as base64
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetCodeSalt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetCodeSalt.Salt">
            <summary>
            <para>Contract code salt if present.</para>
            <para>BOC encoded as base64 or BOC handle</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetCompilerVersion">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetCompilerVersion.Version">
            <summary>
            Compiler version, for example 'sol 0.49.0'
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfGetEndpoints">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetEndpoints.Query">
            <summary>
            Current query endpoint
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfGetEndpoints.Endpoints">
            <summary>
            List of all endpoints used by client
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHash">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHash.Hash">
            <summary>
            <para>Hash of input `data`.</para>
            <para>Encoded with 'hex'.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHDKeyDeriveFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHDKeyDeriveFromXPrv.Xprv">
            <summary>
            Serialized extended private key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHDKeyDeriveFromXPrvPath">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHDKeyDeriveFromXPrvPath.Xprv">
            <summary>
            Derived serialized extended private key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHDKeyPublicFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHDKeyPublicFromXPrv.Public">
            <summary>
            Public key - 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHDKeySecretFromXPrv">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHDKeySecretFromXPrv.Secret">
            <summary>
            Private key - 64 symbols hex string
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfHDKeyXPrvFromMnemonic">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfHDKeyXPrvFromMnemonic.Xprv">
            <summary>
            Serialized extended master private key
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfIteratorNext">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfIteratorNext.Items">
            <summary>
            <para>Next available items.</para>
            <para>Note that `iterator_next` can return an empty items and `has_more` equals to `true`.</para>
            <para>In this case the application have to continue iteration.</para>
            <para>Such situation can take place when there is no data yet but</para>
            <para>the requested `end_time` is not reached.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfIteratorNext.HasMore">
            <summary>
            Indicates that there are more available items in iterated range.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfIteratorNext.ResumeState">
            <summary>
            <para>Optional iterator state that can be used for resuming iteration.</para>
            <para>This field is returned only if the `return_resume_state` parameter</para>
            <para>is specified.</para>
            <para>Note that `resume_state` corresponds to the iteration position</para>
            <para>after the returned items.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfMnemonicFromEntropy">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfMnemonicFromEntropy.Phrase">
            <summary>
            Phrase
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfMnemonicFromRandom">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfMnemonicFromRandom.Phrase">
            <summary>
            String of mnemonic words
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfMnemonicVerify">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfMnemonicVerify.Valid">
            <summary>
            Flag indicating if the mnemonic is valid or not
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfMnemonicWords">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfMnemonicWords.Words">
            <summary>
            The list of mnemonic words
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfModularPower">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfModularPower.ModularPower">
            <summary>
            Result of modular exponentiation
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclBox">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclBox.Encrypted">
            <summary>
            Encrypted data encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclBoxOpen">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclBoxOpen.Decrypted">
            <summary>
            Decrypted data encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclSign.Signed">
            <summary>
            Signed data, encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclSignDetached">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclSignDetached.Signature">
            <summary>
            Signature encoded in `hex`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclSignDetachedVerify">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclSignDetachedVerify.Succeeded">
            <summary>
            `true` if verification succeeded or `false` if it failed
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfNaclSignOpen">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfNaclSignOpen.Unsigned">
            <summary>
            Unsigned data, encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfParse">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfParse.Parsed">
            <summary>
            JSON containing parsed BOC
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfProcessMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfProcessMessage.Transaction">
            <summary>
            <para>Parsed transaction.</para>
            <para>In addition to the regular transaction fields there is a</para>
            <para>`boc` field encoded with `base64` which contains source</para>
            <para>transaction BOC.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfProcessMessage.OutMessages">
            <summary>
            <para>List of output messages' BOCs.</para>
            <para>Encoded as `base64`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfProcessMessage.Decoded">
            <summary>
            Optional decoded message bodies according to the optional `abi` parameter.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfProcessMessage.Fees">
            <summary>
            Transaction fees
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfQuery">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfQuery.Result">
            <summary>
            Result provided by DAppServer.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfQueryCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfQueryCollection.Result">
            <summary>
            Objects that match the provided criteria
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfQueryTransactionTree">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfQueryTransactionTree.Messages">
            <summary>
            Messages.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfQueryTransactionTree.Transactions">
            <summary>
            Transactions.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfRunExecutor">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunExecutor.Transaction">
            <summary>
            <para>Parsed transaction.</para>
            <para>In addition to the regular transaction fields there is a</para>
            <para>`boc` field encoded with `base64` which contains source</para>
            <para>transaction BOC.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunExecutor.OutMessages">
            <summary>
            <para>List of output messages' BOCs.</para>
            <para>Encoded as `base64`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunExecutor.Decoded">
            <summary>
            Optional decoded message bodies according to the optional `abi` parameter.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunExecutor.Account">
            <summary>
            <para>Updated account state BOC.</para>
            <para>Encoded as `base64`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunExecutor.Fees">
            <summary>
            Transaction fees
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfRunGet">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunGet.Output">
            <summary>
            Values returned by get-method on stack
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfRunTvm">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunTvm.OutMessages">
            <summary>
            <para>List of output messages' BOCs.</para>
            <para>Encoded as `base64`</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunTvm.Decoded">
            <summary>
            Optional decoded message bodies according to the optional `abi` parameter.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfRunTvm.Account">
            <summary>
            <para>Updated account state BOC.</para>
            <para>Encoded as `base64`. Attention! Only `account_state.storage.state.data` part of the BOC is updated.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfScrypt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfScrypt.Key">
            <summary>
            <para>Derived key.</para>
            <para>Encoded with `hex`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSendMessage">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSendMessage.ShardBlockId">
            <summary>
            <para>The last generated shard block of the message destination account before the message was sent.</para>
            <para>This block id must be used as a parameter of the</para>
            <para>`wait_for_transaction`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSendMessage.SendingEndpoints">
            <summary>
            <para>The list of endpoints to which the message was sent.</para>
            <para>This list id must be used as a parameter of the</para>
            <para>`wait_for_transaction`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSetCodeSalt">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSetCodeSalt.Code">
            <summary>
            <para>Contract code with salt set.</para>
            <para>BOC encoded as base64 or BOC handle</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSign.Signed">
            <summary>
            Signed data combined with signature encoded in `base64`.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSign.Signature">
            <summary>
            Signature encoded in `hex`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSigningBoxGetPublicKey">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSigningBoxGetPublicKey.Pubkey">
            <summary>
            <para>Public key of signing box.</para>
            <para>Encoded with hex</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSigningBoxSign">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSigningBoxSign.Signature">
            <summary>
            <para>Data signature.</para>
            <para>Encoded with `hex`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfSubscribeCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfSubscribeCollection.Handle">
            <summary>
            <para>Subscription handle.</para>
            <para>Must be closed with `unsubscribe`</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfTonCrc16">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfTonCrc16.Crc">
            <summary>
            Calculated CRC for input data.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfUpdateInitialData">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfUpdateInitialData.Data">
            <summary>
            Updated data BOC or BOC handle
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfVerifySignature">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfVerifySignature.Unsigned">
            <summary>
            Unsigned data encoded in `base64`.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfVersion">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfVersion.Version">
            <summary>
            Core Library version
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.ResultOfWaitForCollection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.ResultOfWaitForCollection.Result">
            <summary>
            First found object that matches the provided criteria
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Signer">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Signer.None">
            <summary>
            <para>No keys are provided.</para>
            <para>Creates an unsigned message.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Signer.External">
            <summary>
            Only public key is provided in unprefixed hex string format to generate unsigned message and `data_to_sign` which can be signed later.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Signer.External.PublicKey">
            <summary>
            Only public key is provided in unprefixed hex string format to generate unsigned message and `data_to_sign` which can be signed later.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Signer.Keys">
            <summary>
            Key pair is provided for signing
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Signer.Keys.KeysAccessor">
            <summary>
            Key pair is provided for signing
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Signer.SigningBox">
            <summary>
            Signing Box interface is provided for signing, allows Dapps to sign messages using external APIs, such as HSM, cold wallet, etc.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Signer.SigningBox.Handle">
            <summary>
            Signing Box interface is provided for signing, allows Dapps to sign messages using external APIs, such as HSM, cold wallet, etc.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.SortDirection">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.SortDirection.ASC">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.SortDirection.DESC">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.Spending">
            <summary>
            [UNSTABLE](UNSTABLE.md) Describes how much funds will be debited from the target  contract balance as a result of the transaction.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Spending.Amount">
            <summary>
            Amount of nanotokens that will be sent to `dst` address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.Spending.Dst">
            <summary>
            Destination address of recipient of funds.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.StateInitParams">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitParams.Abi">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitParams.Value">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.StateInitSource">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.StateInitSource.Message">
            <summary>
            Deploy message.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.Message.Source">
            <summary>
            Deploy message.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.StateInitSource.StateInit">
            <summary>
            State init data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.StateInit.Code">
            <summary>
            State init data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.StateInit.Data">
            <summary>
            State init data.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.StateInit.Library">
            <summary>
            State init data.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.StateInitSource.Tvc">
            <summary>
            <para>Content of the TVC file.</para>
            <para>Encoded in `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.Tvc.TvcAccessor">
            <summary>
            <para>Content of the TVC file.</para>
            <para>Encoded in `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.Tvc.PublicKey">
            <summary>
            <para>Content of the TVC file.</para>
            <para>Encoded in `base64`.</para>
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.StateInitSource.Tvc.InitParams">
            <summary>
            <para>Content of the TVC file.</para>
            <para>Encoded in `base64`.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.TransactionFees">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.InMsgFwdFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.StorageFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.GasFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.OutMsgsFwdFee">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.TotalAccountFees">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionFees.TotalOutput">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.TransactionNode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.Id">
            <summary>
            Transaction id.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.InMsg">
            <summary>
            In message id.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.OutMsgs">
            <summary>
            Out message ids.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.AccountAddr">
            <summary>
            Account address.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.TotalFees">
            <summary>
            Transactions total fees.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.Aborted">
            <summary>
            Aborted flag.
            </summary>
        </member>
        <member name="P:EverscaleNet.Client.Models.TransactionNode.ExitCode">
            <summary>
            Compute phase exit code.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Models.TvmErrorCode">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.CanNotReadTransaction">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.CanNotReadBlockchainConfig">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.TransactionAborted">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.InternalError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.ActionPhaseFailed">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.AccountCodeMissing">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.LowBalance">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.AccountFrozenOrDeleted">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.AccountMissing">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.UnknownExecutionError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.InvalidInputStack">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.InvalidAccountBoc">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.InvalidMessageType">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="F:EverscaleNet.Client.Models.TvmErrorCode.ContractExecutionError">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.AbiModule">
            <summary>
            Abi Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeMessageBody(EverscaleNet.Client.Models.ParamsOfEncodeMessageBody,System.Threading.CancellationToken)">
            <summary>
            Encodes message body according to ABI function call.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.AttachSignatureToMessageBody(EverscaleNet.Client.Models.ParamsOfAttachSignatureToMessageBody,System.Threading.CancellationToken)">
            <summary>
            Not described yet..
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeMessage(EverscaleNet.Client.Models.ParamsOfEncodeMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes an ABI-compatible message</para>
            <para>Allows to encode deploy and function call messages,</para>
            <para>both signed and unsigned.</para>
            <para>Use cases include messages of any possible type:</para>
            <para>- deploy with initial function call (i.e. `constructor` or any other function that is used for some kind</para>
            <para>of initialization);</para>
            <para>- deploy without initial function call;</para>
            <para>- signed/unsigned + data for signing.</para>
            <para>`Signer` defines how the message should or shouldn't be signed:</para>
            <para>`Signer::None` creates an unsigned message. This may be needed in case of some public methods,</para>
            <para>that do not require authorization by pubkey.</para>
            <para>`Signer::External` takes public key and returns `data_to_sign` for later signing.</para>
            <para>Use `attach_signature` method with the result signature to get the signed message.</para>
            <para>`Signer::Keys` creates a signed message with provided key pair.</para>
            <para>[SOON] `Signer::SigningBox` Allows using a special interface to implement signing</para>
            <para>without private key disclosure to SDK. For instance, in case of using a cold wallet or HSM,</para>
            <para>when application calls some API to sign data.</para>
            <para>There is an optional public key can be provided in deploy set in order to substitute one</para>
            <para>in TVM file.</para>
            <para>Public key resolving priority:</para>
            <para>1. Public key from deploy set.</para>
            <para>2. Public key, specified in TVM file.</para>
            <para>3. Public key, provided by signer.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeInternalMessage(EverscaleNet.Client.Models.ParamsOfEncodeInternalMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes an internal ABI-compatible message</para>
            <para>Allows to encode deploy and function call messages.</para>
            <para>Use cases include messages of any possible type:</para>
            <para>- deploy with initial function call (i.e. `constructor` or any other function that is used for some kind</para>
            <para>of initialization);</para>
            <para>- deploy without initial function call;</para>
            <para>- simple function call</para>
            <para>There is an optional public key can be provided in deploy set in order to substitute one</para>
            <para>in TVM file.</para>
            <para>Public key resolving priority:</para>
            <para>1. Public key from deploy set.</para>
            <para>2. Public key, specified in TVM file.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.AttachSignature(EverscaleNet.Client.Models.ParamsOfAttachSignature,System.Threading.CancellationToken)">
            <summary>
            Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`. Returns signed message encoded in `base64`.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.DecodeMessage(EverscaleNet.Client.Models.ParamsOfDecodeMessage,System.Threading.CancellationToken)">
            <summary>
            Decodes message body using provided message BOC and ABI.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.DecodeMessageBody(EverscaleNet.Client.Models.ParamsOfDecodeMessageBody,System.Threading.CancellationToken)">
            <summary>
            Decodes message body using provided body BOC and ABI.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeAccount(EverscaleNet.Client.Models.ParamsOfEncodeAccount,System.Threading.CancellationToken)">
            <summary>
            <para>Creates account state BOC</para>
            <para>Creates account state provided with one of these sets of data :</para>
            <para>1. BOC of code, BOC of data, BOC of library</para>
            <para>2. TVC (string in `base64`), keys, init params</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.DecodeAccountData(EverscaleNet.Client.Models.ParamsOfDecodeAccountData,System.Threading.CancellationToken)">
            <summary>
            <para>Decodes account data using provided data BOC and ABI.</para>
            <para>Note: this feature requires ABI 2.1 or higher.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.UpdateInitialData(EverscaleNet.Client.Models.ParamsOfUpdateInitialData,System.Threading.CancellationToken)">
            <summary>
            Updates initial account data with initial values for the contract's static variables and owner's public key. This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeInitialData(EverscaleNet.Client.Models.ParamsOfEncodeInitialData,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes initial account data with initial values for the contract's static variables and owner's public key into a data BOC that can be passed to `encode_tvc` function afterwards.</para>
            <para>This function is analogue of `tvm.buildDataInit` function in Solidity.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.DecodeInitialData(EverscaleNet.Client.Models.ParamsOfDecodeInitialData,System.Threading.CancellationToken)">
            <summary>
            Decodes initial values of a contract's static variables and owner's public key from account initial data This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.DecodeBoc(EverscaleNet.Client.Models.ParamsOfDecodeBoc,System.Threading.CancellationToken)">
            <summary>
            <para>Decodes BOC into JSON as a set of provided parameters.</para>
            <para>Solidity functions use ABI types for [builder encoding](https://github.com/tonlabs/TON-Solidity-Compiler/blob/master/API.md#tvmbuilderstore).</para>
            <para>The simplest way to decode such a BOC is to use ABI decoding.</para>
            <para>ABI has it own rules for fields layout in cells so manually encoded</para>
            <para>BOC can not be described in terms of ABI rules.</para>
            <para>To solve this problem we introduce a new ABI type `Ref(&lt;ParamType&gt;)`</para>
            <para>which allows to store `ParamType` ABI parameter in cell reference and, thus,</para>
            <para>decode manually encoded BOCs. This type is available only in `decode_boc` function</para>
            <para>and will not be available in ABI messages encoding until it is included into some ABI revision.</para>
            <para>Such BOC descriptions covers most users needs. If someone wants to decode some BOC which</para>
            <para>can not be described by these rules (i.e. BOC with TLB containing constructors of flags</para>
            <para>defining some parsing conditions) then they can decode the fields up to fork condition,</para>
            <para>check the parsed data manually, expand the parsing schema and then decode the whole BOC</para>
            <para>with the full schema.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.AbiModule.EncodeBoc(EverscaleNet.Client.Models.ParamsOfAbiEncodeBoc,System.Threading.CancellationToken)">
            <summary>
            Encodes given parameters in JSON into a BOC using param types from ABI.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.BocModule">
            <summary>
            Boc Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.ParseMessage(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses message boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API message object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.ParseTransaction(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses transaction boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API transaction object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.ParseAccount(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses account boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API account object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.ParseBlock(EverscaleNet.Client.Models.ParamsOfParse,System.Threading.CancellationToken)">
            <summary>
            <para>Parses block boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API block object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.ParseShardstate(EverscaleNet.Client.Models.ParamsOfParseShardstate,System.Threading.CancellationToken)">
            <summary>
            <para>Parses shardstate boc into a JSON</para>
            <para>JSON structure is compatible with GraphQL API shardstate object</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetBlockchainConfig(EverscaleNet.Client.Models.ParamsOfGetBlockchainConfig,System.Threading.CancellationToken)">
            <summary>
            Extract blockchain configuration from key block and also from zerostate.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetBocHash(EverscaleNet.Client.Models.ParamsOfGetBocHash,System.Threading.CancellationToken)">
            <summary>
            Calculates BOC root hash
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetBocDepth(EverscaleNet.Client.Models.ParamsOfGetBocDepth,System.Threading.CancellationToken)">
            <summary>
            Calculates BOC depth
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetCodeFromTvc(EverscaleNet.Client.Models.ParamsOfGetCodeFromTvc,System.Threading.CancellationToken)">
            <summary>
            Extracts code from TVC contract image
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.CacheGet(EverscaleNet.Client.Models.ParamsOfBocCacheGet,System.Threading.CancellationToken)">
            <summary>
            Get BOC from cache
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.CacheSet(EverscaleNet.Client.Models.ParamsOfBocCacheSet,System.Threading.CancellationToken)">
            <summary>
            Save BOC into cache
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.CacheUnpin(EverscaleNet.Client.Models.ParamsOfBocCacheUnpin,System.Threading.CancellationToken)">
            <summary>
            <para>Unpin BOCs with specified pin.</para>
            <para>BOCs which don't have another pins will be removed from cache</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.EncodeBoc(EverscaleNet.Client.Models.ParamsOfEncodeBoc,System.Threading.CancellationToken)">
            <summary>
            Encodes bag of cells (BOC) with builder operations. This method provides the same functionality as Solidity TvmBuilder. Resulting BOC of this method can be passed into Solidity and C++ contracts as TvmCell type.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetCodeSalt(EverscaleNet.Client.Models.ParamsOfGetCodeSalt,System.Threading.CancellationToken)">
            <summary>
            Returns the contract code's salt if it is present.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.SetCodeSalt(EverscaleNet.Client.Models.ParamsOfSetCodeSalt,System.Threading.CancellationToken)">
            <summary>
            <para>Sets new salt to contract code.</para>
            <para>Returns the new contract code with salt.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.DecodeTvc(EverscaleNet.Client.Models.ParamsOfDecodeTvc,System.Threading.CancellationToken)">
            <summary>
            Decodes tvc into code, data, libraries and special options.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.EncodeTvc(EverscaleNet.Client.Models.ParamsOfEncodeTvc,System.Threading.CancellationToken)">
            <summary>
            Encodes tvc from code, data, libraries ans special options (see input params)
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.EncodeExternalInMessage(EverscaleNet.Client.Models.ParamsOfEncodeExternalInMessage,System.Threading.CancellationToken)">
            <summary>
            <para>Encodes a message</para>
            <para>Allows to encode any external inbound message.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.BocModule.GetCompilerVersion(EverscaleNet.Client.Models.ParamsOfGetCompilerVersion,System.Threading.CancellationToken)">
            <summary>
            Returns the compiler version used to compile the code.
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.ClientModule">
            <summary>
            Client Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ClientModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ClientModule.GetApiReference(System.Threading.CancellationToken)">
            <summary>
            Returns Core Library API reference
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ClientModule.Version(System.Threading.CancellationToken)">
            <summary>
            Returns Core Library version
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ClientModule.BuildInfo(System.Threading.CancellationToken)">
            <summary>
            Returns detailed information about this build.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ClientModule.ResolveAppRequest(EverscaleNet.Client.Models.ParamsOfResolveAppRequest,System.Threading.CancellationToken)">
            <summary>
            Resolves application request processing result
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.CryptoModule">
            <summary>
            Crypto Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Factorize(EverscaleNet.Client.Models.ParamsOfFactorize,System.Threading.CancellationToken)">
            <summary>
            <para>Integer factorization</para>
            <para>Performs prime factorization – decomposition of a composite number</para>
            <para>into a product of smaller prime integers (factors).</para>
            <para>See [https://en.wikipedia.org/wiki/Integer_factorization]</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.ModularPower(EverscaleNet.Client.Models.ParamsOfModularPower,System.Threading.CancellationToken)">
            <summary>
            <para>Modular exponentiation</para>
            <para>Performs modular exponentiation for big integers (`base`^`exponent` mod `modulus`).</para>
            <para>See [https://en.wikipedia.org/wiki/Modular_exponentiation]</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.TonCrc16(EverscaleNet.Client.Models.ParamsOfTonCrc16,System.Threading.CancellationToken)">
            <summary>
            Calculates CRC16 using TON algorithm.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.GenerateRandomBytes(EverscaleNet.Client.Models.ParamsOfGenerateRandomBytes,System.Threading.CancellationToken)">
            <summary>
            Generates random byte array of the specified length and returns it in `base64` format
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.ConvertPublicKeyToTonSafeFormat(EverscaleNet.Client.Models.ParamsOfConvertPublicKeyToTonSafeFormat,System.Threading.CancellationToken)">
            <summary>
            Converts public key to ton safe_format
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.GenerateRandomSignKeys(System.Threading.CancellationToken)">
            <summary>
            Generates random ed25519 key pair.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Sign(EverscaleNet.Client.Models.ParamsOfSign,System.Threading.CancellationToken)">
            <summary>
            Signs a data using the provided keys.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.VerifySignature(EverscaleNet.Client.Models.ParamsOfVerifySignature,System.Threading.CancellationToken)">
            <summary>
            Verifies signed data using the provided public key. Raises error if verification is failed.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Sha256(EverscaleNet.Client.Models.ParamsOfHash,System.Threading.CancellationToken)">
            <summary>
            Calculates SHA256 hash of the specified data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Sha512(EverscaleNet.Client.Models.ParamsOfHash,System.Threading.CancellationToken)">
            <summary>
            Calculates SHA512 hash of the specified data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Scrypt(EverscaleNet.Client.Models.ParamsOfScrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Perform `scrypt` encryption</para>
            <para>Derives key from `password` and `key` using `scrypt` algorithm.</para>
            <para>See [https://en.wikipedia.org/wiki/Scrypt].</para>
            <para># Arguments</para>
            <para>- `log_n` - The log2 of the Scrypt parameter `N`</para>
            <para>- `r` - The Scrypt parameter `r`</para>
            <para>- `p` - The Scrypt parameter `p`</para>
            <para># Conditions</para>
            <para>- `log_n` must be less than `64`</para>
            <para>- `r` must be greater than `0` and less than or equal to `4294967295`</para>
            <para>- `p` must be greater than `0` and less than `4294967295`</para>
            <para># Recommended values sufficient for most use-cases</para>
            <para>- `log_n = 15` (`n = 32768`)</para>
            <para>- `r = 8`</para>
            <para>- `p = 1`</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSignKeypairFromSecretKey(EverscaleNet.Client.Models.ParamsOfNaclSignKeyPairFromSecret,System.Threading.CancellationToken)">
            <summary>
            <para>Generates a key pair for signing from the secret key</para>
            <para>**NOTE:** In the result the secret key is actually the concatenation</para>
            <para>of secret and public keys (128 symbols hex string) by design of [NaCL](http://nacl.cr.yp.to/sign.html).</para>
            <para>See also [the stackexchange question](https://crypto.stackexchange.com/questions/54353/).</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSign(EverscaleNet.Client.Models.ParamsOfNaclSign,System.Threading.CancellationToken)">
            <summary>
            Signs data using the signer's secret key.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSignOpen(EverscaleNet.Client.Models.ParamsOfNaclSignOpen,System.Threading.CancellationToken)">
            <summary>
            <para>Verifies the signature and returns the unsigned message</para>
            <para>Verifies the signature in `signed` using the signer's public key `public`</para>
            <para>and returns the message `unsigned`.</para>
            <para>If the signature fails verification, crypto_sign_open raises an exception.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSignDetached(EverscaleNet.Client.Models.ParamsOfNaclSign,System.Threading.CancellationToken)">
            <summary>
            <para>Signs the message using the secret key and returns a signature.</para>
            <para>Signs the message `unsigned` using the secret key `secret`</para>
            <para>and returns a signature `signature`.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSignDetachedVerify(EverscaleNet.Client.Models.ParamsOfNaclSignDetachedVerify,System.Threading.CancellationToken)">
            <summary>
            Verifies the signature with public key and `unsigned` data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclBoxKeypair(System.Threading.CancellationToken)">
            <summary>
            Generates a random NaCl key pair
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclBoxKeypairFromSecretKey(EverscaleNet.Client.Models.ParamsOfNaclBoxKeyPairFromSecret,System.Threading.CancellationToken)">
            <summary>
            Generates key pair from a secret key
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclBox(EverscaleNet.Client.Models.ParamsOfNaclBox,System.Threading.CancellationToken)">
            <summary>
            <para>Public key authenticated encryption</para>
            <para>Encrypt and authenticate a message using the senders secret key, the receivers public</para>
            <para>key, and a nonce.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclBoxOpen(EverscaleNet.Client.Models.ParamsOfNaclBoxOpen,System.Threading.CancellationToken)">
            <summary>
            Decrypt and verify the cipher text using the receivers secret key, the senders public key, and the nonce.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSecretBox(EverscaleNet.Client.Models.ParamsOfNaclSecretBox,System.Threading.CancellationToken)">
            <summary>
            Encrypt and authenticate message using nonce and secret key.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.NaclSecretBoxOpen(EverscaleNet.Client.Models.ParamsOfNaclSecretBoxOpen,System.Threading.CancellationToken)">
            <summary>
            Decrypts and verifies cipher text using `nonce` and secret `key`.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.MnemonicWords(EverscaleNet.Client.Models.ParamsOfMnemonicWords,System.Threading.CancellationToken)">
            <summary>
            Prints the list of words from the specified dictionary
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.MnemonicFromRandom(EverscaleNet.Client.Models.ParamsOfMnemonicFromRandom,System.Threading.CancellationToken)">
            <summary>
            <para>Generates a random mnemonic</para>
            <para>Generates a random mnemonic from the specified dictionary and word count</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.MnemonicFromEntropy(EverscaleNet.Client.Models.ParamsOfMnemonicFromEntropy,System.Threading.CancellationToken)">
            <summary>
            Generates mnemonic from pre-generated entropy
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.MnemonicVerify(EverscaleNet.Client.Models.ParamsOfMnemonicVerify,System.Threading.CancellationToken)">
            <summary>
            <para>Validates a mnemonic phrase</para>
            <para>The phrase supplied will be checked for word length and validated according to the checksum</para>
            <para>specified in BIP0039.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.MnemonicDeriveSignKeys(EverscaleNet.Client.Models.ParamsOfMnemonicDeriveSignKeys,System.Threading.CancellationToken)">
            <summary>
            <para>Derives a key pair for signing from the seed phrase</para>
            <para>Validates the seed phrase, generates master key and then derives</para>
            <para>the key pair from the master key and the specified path</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.HdkeyXprvFromMnemonic(EverscaleNet.Client.Models.ParamsOfHDKeyXPrvFromMnemonic,System.Threading.CancellationToken)">
            <summary>
            Generates an extended master private key that will be the root for all the derived keys
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.HdkeyDeriveFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Returns extended private key derived from the specified extended private key and child index
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.HdkeyDeriveFromXprvPath(EverscaleNet.Client.Models.ParamsOfHDKeyDeriveFromXPrvPath,System.Threading.CancellationToken)">
            <summary>
            Derives the extended private key from the specified key and path
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.HdkeySecretFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeySecretFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Extracts the private key from the serialized extended private key
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.HdkeyPublicFromXprv(EverscaleNet.Client.Models.ParamsOfHDKeyPublicFromXPrv,System.Threading.CancellationToken)">
            <summary>
            Extracts the public key from the serialized extended private key
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.Chacha20(EverscaleNet.Client.Models.ParamsOfChaCha20,System.Threading.CancellationToken)">
            <summary>
            Performs symmetric `chacha20` encryption.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.RegisterSigningBox(System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Register an application implemented signing box.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.GetSigningBox(EverscaleNet.Client.Models.KeyPair,System.Threading.CancellationToken)">
            <summary>
            Creates a default signing box implementation.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.SigningBoxGetPublicKey(EverscaleNet.Client.Models.RegisteredSigningBox,System.Threading.CancellationToken)">
            <summary>
            Returns public key of signing key pair.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.SigningBoxSign(EverscaleNet.Client.Models.ParamsOfSigningBoxSign,System.Threading.CancellationToken)">
            <summary>
            Returns signed user data.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.RemoveSigningBox(EverscaleNet.Client.Models.RegisteredSigningBox,System.Threading.CancellationToken)">
            <summary>
            Removes signing box from SDK.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.RegisterEncryptionBox(System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Register an application implemented encryption box.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.RemoveEncryptionBox(EverscaleNet.Client.Models.RegisteredEncryptionBox,System.Threading.CancellationToken)">
            <summary>
            Removes encryption box from SDK
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.EncryptionBoxGetInfo(EverscaleNet.Client.Models.ParamsOfEncryptionBoxGetInfo,System.Threading.CancellationToken)">
            <summary>
            Queries info from the given encryption box
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.EncryptionBoxEncrypt(EverscaleNet.Client.Models.ParamsOfEncryptionBoxEncrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Encrypts data using given encryption box Note.</para>
            <para>Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after</para>
            <para>decryption to retrieve the original data from decrypted data.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.EncryptionBoxDecrypt(EverscaleNet.Client.Models.ParamsOfEncryptionBoxDecrypt,System.Threading.CancellationToken)">
            <summary>
            <para>Decrypts data using given encryption box Note.</para>
            <para>Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after</para>
            <para>decryption to retrieve the original data from decrypted data.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.CryptoModule.CreateEncryptionBox(EverscaleNet.Client.Models.ParamsOfCreateEncryptionBox,System.Threading.CancellationToken)">
            <summary>
            Creates encryption box with specified algorithm
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.DebotModule">
            <summary>
            Debot Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Init(EverscaleNet.Client.Models.ParamsOfInit,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Creates and instance of DeBot.</para>
            <para>Downloads debot smart contract (code and data) from blockchain and creates</para>
            <para>an instance of Debot Engine for it.</para>
            <para># Remarks</para>
            <para>It does not switch debot to context 0. Browser Callbacks are not called.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Start(EverscaleNet.Client.Models.ParamsOfStart,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Starts the DeBot.</para>
            <para>Downloads debot smart contract from blockchain and switches it to</para>
            <para>context zero.</para>
            <para>This function must be used by Debot Browser to start a dialog with debot.</para>
            <para>While the function is executing, several Browser Callbacks can be called,</para>
            <para>since the debot tries to display all actions from the context 0 to the user.</para>
            <para>When the debot starts SDK registers `BrowserCallbacks` AppObject.</para>
            <para>Therefore when `debote.remove` is called the debot is being deleted and the callback is called</para>
            <para>with `finish`=`true` which indicates that it will never be used again.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Fetch(EverscaleNet.Client.Models.ParamsOfFetch,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Fetches DeBot metadata from blockchain.</para>
            <para>Downloads DeBot from blockchain and creates and fetches its metadata.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Execute(EverscaleNet.Client.Models.ParamsOfExecute,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Executes debot action.</para>
            <para>Calls debot engine referenced by debot handle to execute input action.</para>
            <para>Calls Debot Browser Callbacks if needed.</para>
            <para># Remarks</para>
            <para>Chain of actions can be executed if input action generates a list of subactions.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Send(EverscaleNet.Client.Models.ParamsOfSend,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Sends message to Debot.</para>
            <para>Used by Debot Browser to send response on Dinterface call or from other Debots.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.DebotModule.Remove(EverscaleNet.Client.Models.ParamsOfRemove,System.Threading.CancellationToken)">
            <summary>
            <para>[UNSTABLE](UNSTABLE.md) Destroys debot handle.</para>
            <para>Removes handle from Client Context and drops debot engine referenced by that handle.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.NetModule">
            <summary>
            Net Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.Query(EverscaleNet.Client.Models.ParamsOfQuery,System.Threading.CancellationToken)">
            <summary>
            Performs DAppServer GraphQL query.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.BatchQuery(EverscaleNet.Client.Models.ParamsOfBatchQuery,System.Threading.CancellationToken)">
            <summary>
            Performs multiple queries per single fetch.
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.QueryCollection(EverscaleNet.Client.Models.ParamsOfQueryCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Queries collection data</para>
            <para>Queries data that satisfies the `filter` conditions,</para>
            <para>limits the number of returned records and orders them.</para>
            <para>The projection fields are limited to `result` fields</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.AggregateCollection(EverscaleNet.Client.Models.ParamsOfAggregateCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Aggregates collection data.</para>
            <para>Aggregates values from the specified `fields` for records</para>
            <para>that satisfies the `filter` conditions,</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.WaitForCollection(EverscaleNet.Client.Models.ParamsOfWaitForCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an object that fulfills the conditions or waits for its appearance</para>
            <para>Triggers only once.</para>
            <para>If object that satisfies the `filter` conditions</para>
            <para>already exists - returns it immediately.</para>
            <para>If not - waits for insert/update of data within the specified `timeout`,</para>
            <para>and returns it.</para>
            <para>The projection fields are limited to `result` fields</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.Unsubscribe(EverscaleNet.Client.Models.ResultOfSubscribeCollection,System.Threading.CancellationToken)">
            <summary>
            <para>Cancels a subscription</para>
            <para>Cancels a subscription specified by its handle.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.SubscribeCollection(EverscaleNet.Client.Models.ParamsOfSubscribeCollection,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a collection subscription</para>
            <para>Triggers for each insert/update of data that satisfies</para>
            <para>the `filter` conditions.</para>
            <para>The projection fields are limited to `result` fields.</para>
            <para>The subscription is a persistent communication channel between</para>
            <para>client and Free TON Network.</para>
            <para>All changes in the blockchain will be reflected in realtime.</para>
            <para>Changes means inserts and updates of the blockchain entities.</para>
            <para>### Important Notes on Subscriptions</para>
            <para>Unfortunately sometimes the connection with the network brakes down.</para>
            <para>In this situation the library attempts to reconnect to the network.</para>
            <para>This reconnection sequence can take significant time.</para>
            <para>All of this time the client is disconnected from the network.</para>
            <para>Bad news is that all blockchain changes that happened while</para>
            <para>the client was disconnected are lost.</para>
            <para>Good news is that the client report errors to the callback when</para>
            <para>it loses and resumes connection.</para>
            <para>So, if the lost changes are important to the application then</para>
            <para>the application must handle these error reports.</para>
            <para>Library reports errors with `responseType` == 101</para>
            <para>and the error object passed via `params`.</para>
            <para>When the library has successfully reconnected</para>
            <para>the application receives callback with</para>
            <para>`responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).</para>
            <para>Application can use several ways to handle this situation:</para>
            <para>- If application monitors changes for the single blockchain</para>
            <para>object (for example specific account):  application</para>
            <para>can perform a query for this object and handle actual data as a</para>
            <para>regular data from the subscription.</para>
            <para>- If application monitors sequence of some blockchain objects</para>
            <para>(for example transactions of the specific account): application must</para>
            <para>refresh all cached (or visible to user) lists where this sequences presents.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.Subscribe(EverscaleNet.Client.Models.ParamsOfSubscribe,System.Action{System.Text.Json.JsonElement,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a subscription</para>
            <para>The subscription is a persistent communication channel between</para>
            <para>client and Everscale Network.</para>
            <para>### Important Notes on Subscriptions</para>
            <para>Unfortunately sometimes the connection with the network brakes down.</para>
            <para>In this situation the library attempts to reconnect to the network.</para>
            <para>This reconnection sequence can take significant time.</para>
            <para>All of this time the client is disconnected from the network.</para>
            <para>Bad news is that all changes that happened while</para>
            <para>the client was disconnected are lost.</para>
            <para>Good news is that the client report errors to the callback when</para>
            <para>it loses and resumes connection.</para>
            <para>So, if the lost changes are important to the application then</para>
            <para>the application must handle these error reports.</para>
            <para>Library reports errors with `responseType` == 101</para>
            <para>and the error object passed via `params`.</para>
            <para>When the library has successfully reconnected</para>
            <para>the application receives callback with</para>
            <para>`responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).</para>
            <para>Application can use several ways to handle this situation:</para>
            <para>- If application monitors changes for the single</para>
            <para>object (for example specific account):  application</para>
            <para>can perform a query for this object and handle actual data as a</para>
            <para>regular data from the subscription.</para>
            <para>- If application monitors sequence of some objects</para>
            <para>(for example transactions of the specific account): application must</para>
            <para>refresh all cached (or visible to user) lists where this sequences presents.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.Suspend(System.Threading.CancellationToken)">
            <summary>
            Suspends network module to stop any network activity
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.Resume(System.Threading.CancellationToken)">
            <summary>
            Resumes network module to enable network activity
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.FindLastShardBlock(EverscaleNet.Client.Models.ParamsOfFindLastShardBlock,System.Threading.CancellationToken)">
            <summary>
            Returns ID of the last block in a specified account shard
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.FetchEndpoints(System.Threading.CancellationToken)">
            <summary>
            Requests the list of alternative endpoints from server
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.SetEndpoints(EverscaleNet.Client.Models.EndpointsSet,System.Threading.CancellationToken)">
            <summary>
            Sets the list of endpoints to use on reinit
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.GetEndpoints(System.Threading.CancellationToken)">
            <summary>
            Requests the list of alternative endpoints from server
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.QueryCounterparties(EverscaleNet.Client.Models.ParamsOfQueryCounterparties,System.Threading.CancellationToken)">
            <summary>
            <para>Allows to query and paginate through the list of accounts that the specified account has interacted with, sorted by the time of the last internal message between accounts</para>
            <para>*Attention* this query retrieves data from 'Counterparties' service which is not supported in</para>
            <para>the opensource version of DApp Server (and will not be supported) as well as in TON OS SE (will be supported in SE in future),</para>
            <para>but is always accessible via [TON OS Devnet/Mainnet Clouds](https://docs.ton.dev/86757ecb2/p/85c869-networks)</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.QueryTransactionTree(EverscaleNet.Client.Models.ParamsOfQueryTransactionTree,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a tree of transactions triggered by a specific message.</para>
            <para>Performs recursive retrieval of a transactions tree produced by a specific message:</para>
            <para>in_msg -&gt; dst_transaction -&gt; out_messages -&gt; dst_transaction -&gt; ...</para>
            <para>If the chain of transactions execution is in progress while the function is running,</para>
            <para>it will wait for the next transactions to appear until the full tree or more than 50 transactions</para>
            <para>are received.</para>
            <para>All the retrieved messages and transactions are included</para>
            <para>into `result.messages` and `result.transactions` respectively.</para>
            <para>Function reads transactions layer by layer, by pages of 20 transactions.</para>
            <para>The retrieval prosess goes like this:</para>
            <para>Let's assume we have an infinite chain of transactions and each transaction generates 5 messages.</para>
            <para>1. Retrieve 1st message (input parameter) and corresponding transaction - put it into result.</para>
            <para>It is the first level of the tree of transactions - its root.</para>
            <para>Retrieve 5 out message ids from the transaction for next steps.</para>
            <para>2. Retrieve 5 messages and corresponding transactions on the 2nd layer. Put them into result.</para>
            <para>Retrieve 5*5 out message ids from these transactions for next steps</para>
            <para>3. Retrieve 20 (size of the page) messages and transactions (3rd layer) and 20*5=100 message ids (4th layer).</para>
            <para>4. Retrieve the last 5 messages and 5 transactions on the 3rd layer + 15 messages and transactions (of 100) from the 4th layer</para>
            <para>+ 25 message ids of the 4th layer + 75 message ids of the 5th layer.</para>
            <para>5. Retrieve 20 more messages and 20 more transactions of the 4th layer + 100 more message ids of the 5th layer.</para>
            <para>6. Now we have 1+5+20+20+20 = 66 transactions, which is more than 50. Function exits with the tree of</para>
            <para>1m-&gt;1t-&gt;5m-&gt;5t-&gt;25m-&gt;25t-&gt;35m-&gt;35t. If we see any message ids in the last transactions out_msgs, which don't have</para>
            <para>corresponding messages in the function result, it means that the full tree was not received and we need to continue iteration.</para>
            <para>To summarize, it is guaranteed that each message in `result.messages` has the corresponding transaction</para>
            <para>in the `result.transactions`.</para>
            <para>But there is no guarantee that all messages from transactions `out_msgs` are</para>
            <para>presented in `result.messages`.</para>
            <para>So the application has to continue retrieval for missing messages if it requires.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.CreateBlockIterator(EverscaleNet.Client.Models.ParamsOfCreateBlockIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Creates block iterator.</para>
            <para>Block iterator uses robust iteration methods that guaranties that every</para>
            <para>block in the specified range isn't missed or iterated twice.</para>
            <para>Iterated range can be reduced with some filters:</para>
            <para>- `start_time` – the bottom time range. Only blocks with `gen_utime`</para>
            <para>more or equal to this value is iterated. If this parameter is omitted then there is</para>
            <para>no bottom time edge, so all blocks since zero state is iterated.</para>
            <para>- `end_time` – the upper time range. Only blocks with `gen_utime`</para>
            <para>less then this value is iterated. If this parameter is omitted then there is</para>
            <para>no upper time edge, so iterator never finishes.</para>
            <para>- `shard_filter` – workchains and shard prefixes that reduce the set of interesting</para>
            <para>blocks. Block conforms to the shard filter if it belongs to the filter workchain</para>
            <para>and the first bits of block's `shard` fields matches to the shard prefix.</para>
            <para>Only blocks with suitable shard are iterated.</para>
            <para>Items iterated is a JSON objects with block data. The minimal set of returned</para>
            <para>fields is:</para>
            <para>```text</para>
            <para>id</para>
            <para>gen_utime</para>
            <para>workchain_id</para>
            <para>shard</para>
            <para>after_split</para>
            <para>after_merge</para>
            <para>prev_ref {</para>
            <para>    root_hash</para>
            <para>}</para>
            <para>prev_alt_ref {</para>
            <para>    root_hash</para>
            <para>}</para>
            <para>```</para>
            <para>Application can request additional fields in the `result` parameter.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.ResumeBlockIterator(EverscaleNet.Client.Models.ParamsOfResumeBlockIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Resumes block iterator.</para>
            <para>The iterator stays exactly at the same position where the `resume_state` was catched.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.CreateTransactionIterator(EverscaleNet.Client.Models.ParamsOfCreateTransactionIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Creates transaction iterator.</para>
            <para>Transaction iterator uses robust iteration methods that guaranty that every</para>
            <para>transaction in the specified range isn't missed or iterated twice.</para>
            <para>Iterated range can be reduced with some filters:</para>
            <para>- `start_time` – the bottom time range. Only transactions with `now`</para>
            <para>more or equal to this value are iterated. If this parameter is omitted then there is</para>
            <para>no bottom time edge, so all the transactions since zero state are iterated.</para>
            <para>- `end_time` – the upper time range. Only transactions with `now`</para>
            <para>less then this value are iterated. If this parameter is omitted then there is</para>
            <para>no upper time edge, so iterator never finishes.</para>
            <para>- `shard_filter` – workchains and shard prefixes that reduce the set of interesting</para>
            <para>accounts. Account address conforms to the shard filter if</para>
            <para>it belongs to the filter workchain and the first bits of address match to</para>
            <para>the shard prefix. Only transactions with suitable account addresses are iterated.</para>
            <para>- `accounts_filter` – set of account addresses whose transactions must be iterated.</para>
            <para>Note that accounts filter can conflict with shard filter so application must combine</para>
            <para>these filters carefully.</para>
            <para>Iterated item is a JSON objects with transaction data. The minimal set of returned</para>
            <para>fields is:</para>
            <para>```text</para>
            <para>id</para>
            <para>account_addr</para>
            <para>now</para>
            <para>balance_delta(format:DEC)</para>
            <para>bounce { bounce_type }</para>
            <para>in_message {</para>
            <para>    id</para>
            <para>    value(format:DEC)</para>
            <para>    msg_type</para>
            <para>    src</para>
            <para>}</para>
            <para>out_messages {</para>
            <para>    id</para>
            <para>    value(format:DEC)</para>
            <para>    msg_type</para>
            <para>    dst</para>
            <para>}</para>
            <para>```</para>
            <para>Application can request an additional fields in the `result` parameter.</para>
            <para>Another parameter that affects on the returned fields is the `include_transfers`.</para>
            <para>When this parameter is `true` the iterator computes and adds `transfer` field containing</para>
            <para>list of the useful `TransactionTransfer` objects.</para>
            <para>Each transfer is calculated from the particular message related to the transaction</para>
            <para>and has the following structure:</para>
            <para>- message – source message identifier.</para>
            <para>- isBounced – indicates that the transaction is bounced, which means the value will be returned back to the sender.</para>
            <para>- isDeposit – indicates that this transfer is the deposit (true) or withdraw (false).</para>
            <para>- counterparty – account address of the transfer source or destination depending on `isDeposit`.</para>
            <para>- value – amount of nano tokens transferred. The value is represented as a decimal string</para>
            <para>because the actual value can be more precise than the JSON number can represent. Application</para>
            <para>must use this string carefully – conversion to number can follow to loose of precision.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.ResumeTransactionIterator(EverscaleNet.Client.Models.ParamsOfResumeTransactionIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Resumes transaction iterator.</para>
            <para>The iterator stays exactly at the same position where the `resume_state` was caught.</para>
            <para>Note that `resume_state` doesn't store the account filter. If the application requires</para>
            <para>to use the same account filter as it was when the iterator was created then the application</para>
            <para>must pass the account filter again in `accounts_filter` parameter.</para>
            <para>Application should call the `remove_iterator` when iterator is no longer required.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.IteratorNext(EverscaleNet.Client.Models.ParamsOfIteratorNext,System.Threading.CancellationToken)">
            <summary>
            <para>Returns next available items.</para>
            <para>In addition to available items this function returns the `has_more` flag</para>
            <para>indicating that the iterator isn't reach the end of the iterated range yet.</para>
            <para>This function can return the empty list of available items but</para>
            <para>indicates that there are more items is available.</para>
            <para>This situation appears when the iterator doesn't reach iterated range</para>
            <para>but database doesn't contains available items yet.</para>
            <para>If application requests resume state in `return_resume_state` parameter</para>
            <para>then this function returns `resume_state` that can be used later to</para>
            <para>resume the iteration from the position after returned items.</para>
            <para>The structure of the items returned depends on the iterator used.</para>
            <para>See the description to the appropriated iterator creation function.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.NetModule.RemoveIterator(EverscaleNet.Client.Models.RegisteredIterator,System.Threading.CancellationToken)">
            <summary>
            <para>Removes an iterator</para>
            <para>Frees all resources allocated in library to serve iterator.</para>
            <para>Application always should call the `remove_iterator` when iterator</para>
            <para>is no longer required.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.ProcessingModule">
            <summary>
            Processing Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProcessingModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProcessingModule.SendMessage(EverscaleNet.Client.Models.ParamsOfSendMessage,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Sends message to the network</para>
            <para>Sends message to the network and returns the last generated shard block of the destination account</para>
            <para>before the message was sent. It will be required later for message processing.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProcessingModule.WaitForTransaction(EverscaleNet.Client.Models.ParamsOfWaitForTransaction,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Performs monitoring of the network for the result transaction of the external inbound message processing.</para>
            <para>`send_events` enables intermediate events, such as `WillFetchNextBlock`,</para>
            <para>`FetchNextBlockFailed` that may be useful for logging of new shard blocks creation</para>
            <para>during message processing.</para>
            <para>Note, that presence of the `abi` parameter is critical for ABI</para>
            <para>compliant contracts. Message processing uses drastically</para>
            <para>different strategy for processing message for contracts which</para>
            <para>ABI includes "expire" header.</para>
            <para>When the ABI header `expire` is present, the processing uses</para>
            <para>`message expiration` strategy:</para>
            <para>- The maximum block gen time is set to</para>
            <para>  `message_expiration_timeout + transaction_wait_timeout`.</para>
            <para>- When maximum block gen time is reached, the processing will</para>
            <para>  be finished with `MessageExpired` error.</para>
            <para>When the ABI header `expire` isn't present or `abi` parameter</para>
            <para>isn't specified, the processing uses `transaction waiting`</para>
            <para>strategy:</para>
            <para>- The maximum block gen time is set to</para>
            <para>  `now() + transaction_wait_timeout`.</para>
            <para>- If maximum block gen time is reached and no result transaction is found,</para>
            <para>the processing will exit with an error.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProcessingModule.ProcessMessage(EverscaleNet.Client.Models.ParamsOfProcessMessage,System.Action{EverscaleNet.Client.Models.ProcessingEvent,System.UInt32},System.Threading.CancellationToken)">
            <summary>
            <para>Creates message, sends it to the network and monitors its processing.</para>
            <para>Creates ABI-compatible message,</para>
            <para>sends it to the network and monitors for the result transaction.</para>
            <para>Decodes the output messages' bodies.</para>
            <para>If contract's ABI includes "expire" header, then</para>
            <para>SDK implements retries in case of unsuccessful message delivery within the expiration</para>
            <para>timeout: SDK recreates the message, sends it and processes it again.</para>
            <para>The intermediate events, such as `WillFetchFirstBlock`, `WillSend`, `DidSend`,</para>
            <para>`WillFetchNextBlock`, etc - are switched on/off by `send_events` flag</para>
            <para>and logged into the supplied callback function.</para>
            <para>The retry configuration parameters are defined in the client's `NetworkConfig` and `AbiConfig`.</para>
            <para>If contract's ABI does not include "expire" header</para>
            <para>then, if no transaction is found within the network timeout (see config parameter ), exits with error.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.ProofsModule">
            <summary>
            Proofs Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProofsModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProofsModule.ProofBlockData(EverscaleNet.Client.Models.ParamsOfProofBlockData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given block's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function checks block proofs and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input param is a single block's JSON object, which was queried from DApp server using</para>
            <para>functions such as `net.query`, `net.query_collection` or `net.wait_for_collection`.</para>
            <para>If block's BOC is not provided in the JSON, it will be queried from DApp server</para>
            <para>(in this case it is required to provide at least `id` of block).</para>
            <para>Please note, that joins (like `signatures` in `Block`) are separated entities and not supported,</para>
            <para>so function will throw an exception in a case if JSON being checked has such entities in it.</para>
            <para>If `cache_in_local_storage` in config is set to `true` (default), downloaded proofs and</para>
            <para>master-chain BOCs are saved into the persistent local storage (e.g. file system for native</para>
            <para>environments or browser's IndexedDB for the web); otherwise all the data is cached only in</para>
            <para>memory in current client's context and will be lost after destruction of the client.</para>
            <para>**Why Proofs are needed**</para>
            <para>Proofs are needed to ensure that the data downloaded from a DApp server is real blockchain</para>
            <para>data. Checking proofs can protect from the malicious DApp server which can potentially provide</para>
            <para>fake data, or also from "Man in the Middle" attacks class.</para>
            <para>**What Proofs are**</para>
            <para>Simply, proof is a list of signatures of validators', which have signed this particular master-</para>
            <para>block.</para>
            <para>The very first validator set's public keys are included in the zero-state. Whe know a root hash</para>
            <para>of the zero-state, because it is stored in the network configuration file, it is our authority</para>
            <para>root. For proving zero-state it is enough to calculate and compare its root hash.</para>
            <para>In each new validator cycle the validator set is changed. The new one is stored in a key-block,</para>
            <para>which is signed by the validator set, which we already trust, the next validator set will be</para>
            <para>stored to the new key-block and signed by the current validator set, and so on.</para>
            <para>In order to prove any block in the master-chain we need to check, that it has been signed by</para>
            <para>a trusted validator set. So we need to check all key-blocks' proofs, started from the zero-state</para>
            <para>and until the block, which we want to prove. But it can take a lot of time and traffic to</para>
            <para>download and prove all key-blocks on a client. For solving this, special trusted blocks are used</para>
            <para>in TON-SDK.</para>
            <para>The trusted block is the authority root, as well, as the zero-state. Each trusted block is the</para>
            <para>`id` (e.g. `root_hash`) of the already proven key-block. There can be plenty of trusted</para>
            <para>blocks, so there can be a lot of authority roots. The hashes of trusted blocks for MainNet</para>
            <para>and DevNet are hardcoded in SDK in a separated binary file (trusted_key_blocks.bin) and can</para>
            <para>be updated for each release.</para>
            <para>In future SDK releases, one will also be able to provide their hashes of trusted blocks for</para>
            <para>other networks, besides for MainNet and DevNet.</para>
            <para>By using trusted key-blocks, in order to prove any block, we can prove chain of key-blocks to</para>
            <para>the closest previous trusted key-block, not only to the zero-state.</para>
            <para>But shard-blocks don't have proofs on DApp server. In this case, in order to prove any shard-</para>
            <para>block data, we search for a corresponding master-block, which contains the root hash of this</para>
            <para>shard-block, or some shard block which is linked to that block in shard-chain. After proving</para>
            <para>this master-block, we traverse through each link and calculate and compare hashes with links,</para>
            <para>one-by-one. After that we can ensure that this shard-block has also been proven.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProofsModule.ProofTransactionData(EverscaleNet.Client.Models.ParamsOfProofTransactionData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given transaction's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function requests the corresponding block, checks block proofs, ensures that given</para>
            <para>transaction exists in the proven block and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input parameter is a single transaction's JSON object (see params description),</para>
            <para>which was queried from TONOS API using functions such as `net.query`, `net.query_collection`</para>
            <para>or `net.wait_for_collection`.</para>
            <para>If transaction's BOC and/or `block_id` are not provided in the JSON, they will be queried from</para>
            <para>TONOS API.</para>
            <para>Please note, that joins (like `account`, `in_message`, `out_messages`, etc. in `Transaction`</para>
            <para>entity) are separated entities and not supported, so function will throw an exception in a case</para>
            <para>if JSON being checked has such entities in it.</para>
            <para>For more information about proofs checking, see description of `proof_block_data` function.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.ProofsModule.ProofMessageData(EverscaleNet.Client.Models.ParamsOfProofMessageData,System.Threading.CancellationToken)">
            <summary>
            <para>Proves that a given message's data, which is queried from TONOS API, can be trusted.</para>
            <para>This function first proves the corresponding transaction, ensures that the proven transaction</para>
            <para>refers to the given message and compares given data with the proven.</para>
            <para>If the given data differs from the proven, the exception will be thrown.</para>
            <para>The input parameter is a single message's JSON object (see params description),</para>
            <para>which was queried from TONOS API using functions such as `net.query`, `net.query_collection`</para>
            <para>or `net.wait_for_collection`.</para>
            <para>If message's BOC and/or non-null `src_transaction.id` or `dst_transaction.id` are not provided</para>
            <para>in the JSON, they will be queried from TONOS API.</para>
            <para>Please note, that joins (like `block`, `dst_account`, `dst_transaction`, `src_account`,</para>
            <para>`src_transaction`, etc. in `Message` entity) are separated entities and not supported,</para>
            <para>so function will throw an exception in a case if JSON being checked has such entities in it.</para>
            <para>For more information about proofs checking, see description of `proof_block_data` function.</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.TvmModule">
            <summary>
            Tvm Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.TvmModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.TvmModule.RunExecutor(EverscaleNet.Client.Models.ParamsOfRunExecutor,System.Threading.CancellationToken)">
            <summary>
            <para>Emulates all the phases of contract execution locally</para>
            <para>Performs all the phases of contract execution on Transaction Executor -</para>
            <para>the same component that is used on Validator Nodes.</para>
            <para>Can be used for contract debugging, to find out the reason why a message was not delivered successfully.</para>
            <para>Validators throw away the failed external inbound messages (if they failed bedore `ACCEPT`) in the real network.</para>
            <para>This is why these messages are impossible to debug in the real network.</para>
            <para>With the help of run_executor you can do that. In fact, `process_message` function</para>
            <para>performs local check with `run_executor` if there was no transaction as a result of processing</para>
            <para>and returns the error, if there is one.</para>
            <para>Another use case to use `run_executor` is to estimate fees for message execution.</para>
            <para>Set  `AccountForExecutor::Account.unlimited_balance`</para>
            <para>to `true` so that emulation will not depend on the actual balance.</para>
            <para>This may be needed to calculate deploy fees for an account that does not exist yet.</para>
            <para>JSON with fees is in `fees` field of the result.</para>
            <para>One more use case - you can produce the sequence of operations,</para>
            <para>thus emulating the sequential contract calls locally.</para>
            <para>And so on.</para>
            <para>Transaction executor requires account BOC (bag of cells) as a parameter.</para>
            <para>To get the account BOC - use `net.query` method to download it from GraphQL API</para>
            <para>(field `boc` of `account`) or generate it with `abi.encode_account` method.</para>
            <para>Also it requires message BOC. To get the message BOC - use `abi.encode_message` or `abi.encode_internal_message`.</para>
            <para>If you need this emulation to be as precise as possible (for instance - emulate transaction</para>
            <para>with particular lt in particular block or use particular blockchain config,</para>
            <para>downloaded from a particular key block - then specify `execution_options` parameter.</para>
            <para>If you need to see the aborted transaction as a result, not as an error, set `skip_transaction_check` to `true`.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.TvmModule.RunTvm(EverscaleNet.Client.Models.ParamsOfRunTvm,System.Threading.CancellationToken)">
            <summary>
            <para>Executes get-methods of ABI-compatible contracts</para>
            <para>Performs only a part of compute phase of transaction execution</para>
            <para>that is used to run get-methods of ABI-compatible contracts.</para>
            <para>If you try to run get-methods with `run_executor` you will get an error, because it checks ACCEPT and exits</para>
            <para>if there is none, which is actually true for get-methods.</para>
            <para> To get the account BOC (bag of cells) - use `net.query` method to download it from GraphQL API</para>
            <para>(field `boc` of `account`) or generate it with `abi.encode_account method`.</para>
            <para>To get the message BOC - use `abi.encode_message` or prepare it any other way, for instance, with FIFT script.</para>
            <para>Attention! Updated account state is produces as well, but only</para>
            <para>`account_state.storage.state.data`  part of the BOC is updated.</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.TvmModule.RunGet(EverscaleNet.Client.Models.ParamsOfRunGet,System.Threading.CancellationToken)">
            <summary>
            <para>Executes a get-method of FIFT contract</para>
            <para>Executes a get-method of FIFT contract that fulfills the smc-guidelines https://test.ton.org/smc-guidelines.txt</para>
            <para>and returns the result data from TVM's stack</para>
            </summary>
        </member>
        <member name="T:EverscaleNet.Client.Modules.UtilsModule">
            <summary>
            Utils Module
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.#ctor(EverscaleNet.Abstract.IEverClientAdapter)">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.ConvertAddress(EverscaleNet.Client.Models.ParamsOfConvertAddress,System.Threading.CancellationToken)">
            <summary>
            Converts address from any TON format to any TON format
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.GetAddressType(EverscaleNet.Client.Models.ParamsOfGetAddressType,System.Threading.CancellationToken)">
            <summary>
            <para>Validates and returns the type of any TON address.</para>
            <para>Address types are the following</para>
            <para>`0:919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - standard TON address most</para>
            <para>commonly used in all cases. Also called as hex address</para>
            <para>`919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - account ID. A part of full</para>
            <para>address. Identifies account inside particular workchain</para>
            <para>`EQCRnbjnQNUL80nfLuoD+jDDhdhGuZH/VULmcJjugz/H9wam` - base64 address. Also called "user-friendly".</para>
            <para>Was used at the beginning of TON. Now it is supported for compatibility</para>
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.CalcStorageFee(EverscaleNet.Client.Models.ParamsOfCalcStorageFee,System.Threading.CancellationToken)">
            <summary>
            Calculates storage fee for an account over a specified time period
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.CompressZstd(EverscaleNet.Client.Models.ParamsOfCompressZstd,System.Threading.CancellationToken)">
            <summary>
            Compresses data using Zstandard algorithm
            </summary>
        </member>
        <member name="M:EverscaleNet.Client.Modules.UtilsModule.DecompressZstd(EverscaleNet.Client.Models.ParamsOfDecompressZstd,System.Threading.CancellationToken)">
            <summary>
            Decompresses data using Zstandard algorithm
            </summary>
        </member>
        <member name="T:EverscaleNet.Models.CreateContextResponse">
            <summary>
                Result of context creation
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.CreateContextResponse.ContextId">
            <summary>
                Created context id or null if failed
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.CreateContextResponse.Error">
            <summary>
                Error if failed or null if context was created successfully
            </summary>
        </member>
        <member name="T:EverscaleNet.Models.EverClientException">
            <summary>
                Provide code and error message
            </summary>
        </member>
        <member name="M:EverscaleNet.Models.EverClientException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:EverscaleNet.Models.EverClientException.Code">
            <summary>
            </summary>
        </member>
        <member name="M:EverscaleNet.Models.EverClientException.CreateExceptionWithCodeWithData(System.UInt32,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Exception)">
            <summary>
                Create exception with code, data and message
            </summary>
            <param name="code"></param>
            <param name="data"></param>
            <param name="message"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="T:EverscaleNet.Models.EverClientOptions">
            <summary>
                Everscale client options. See details https://tonlabs.gitbook.io/ton-sdk/guides/installation/configure_sdk#configure-client
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.EverClientOptions.Network">
            <summary>
                https://tonlabs.gitbook.io/ton-sdk/guides/installation/configure_sdk#network-config
                see available endpoint URLs https://tonlabs.gitbook.io/ton-sdk/reference/ton-os-api/networks#networks
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.EverClientOptions.Crypto">
            <summary>
                https://tonlabs.gitbook.io/ton-sdk/guides/installation/configure_sdk#crypto-config
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.EverClientOptions.Abi">
            <summary>
                https://tonlabs.gitbook.io/ton-sdk/guides/installation/configure_sdk#abi-config
            </summary>
        </member>
        <member name="T:EverscaleNet.Models.Package">
            <summary>
                Package contains Abi and Tvc of contract
            </summary>
        </member>
        <member name="M:EverscaleNet.Models.Package.#ctor(EverscaleNet.Client.Models.Abi,System.String)">
            <summary>
                Package .ctor
            </summary>
            <param name="abi"></param>
            <param name="tvc"></param>
        </member>
        <member name="P:EverscaleNet.Models.Package.Abi">
            <summary>
                Abi of contract
            </summary>
        </member>
        <member name="P:EverscaleNet.Models.Package.Tvc">
            <summary>
                Tvc of contract
            </summary>
        </member>
    </members>
</doc>
